#+TITLE: Emacs 入门基础
#+AUTHOR: erikge
#+EMAIL: erikge@qq.com
#+KEYWORDS: emacs, basic, startup
#+OPTIONS: H:4 toc:t 

学习emacs是一个挑战，但是却能体会更多软件世界的精彩。
最好的学习方法，随时用，尽量用。

* Emacs是什么
正统的说法也许是"Emacs即Editor MACroS（宏编辑器），是一种文本编辑器"。

* 基本概念
** buffer
缓冲区. Emacs并不直接对文件进行操作, 它是把文件加载进buffer, 用户直接操作buffer, 只有当用户确定把buffer中所做的修改写人文件时, Emacs才把buffer中的内容写入文件. buffer实际上就是一个内存缓冲区, 这和一般编辑器中都一样, 应该很好理解.
缓冲区之下是状态栏，显示当前的一些状态信息，比如图中从左至右依次为:
U: 当前的文件编码是UTF-8, 如果是GBK会显示c
**: 文件状态，**表示未保存，--表示可写，%%表示只读
** window
窗口. 由于Emacs很早就诞生了, 它的窗口概念和现在基于窗口的操作系统中的窗口概念不是一样的. Emacs中的窗口是用来显示buffer的一个区域. 它并不像操作系统中的窗口拥有自己的标题栏,系统菜单栏.
** frame
Emacs中的frame就是操作系统中的窗口.
buffer是文件的内存表示, windows则是显示buffer的区域, 一个frame中可以有多个window, Emacs则可以有多个frame.
** Emacs Lisp
Emacs最基础的部分是用c写的，其他部分都是用Emacs Lisp语言写的，Emacs Lisp语言是基于lisp语言的. lisp是LISt Processor的缩写, 即链表处理语言, 所以lisp语言的操作都是基于链表的, 它的语法也是链表结构, 链表第一个元素表示函数名, 其他元素是参数, 比如通常语言中的a+b, 在lisp就是(+ a b)
** mode
mode有major mode和minor mode之分, 每个缓冲区对应一个major mode, 也只有一个major mode, 但是可以有多个minor mode. Emacs对每一种文件都有一个mode.
** 命令
你对Emacs所有的操作都是对Emacs的命令的调用。比如，你在text-mode里，当你按下任何字母键进行编辑的时候，实际上是调用的emacs的命令self-insert-command.
** 快捷键
   Emacs中Control键用C表示,Alt键用M表示, 即: C-c表示Control C, M-x表示Alt x.
除掉以Alt键开头的，比如Alt a，Emacs中的快捷键基本上都有一个前缀，Emacs中最多的快捷键前缀就是C-x，C-c，前缀表示，你不必要一起按下前缀和后缀，可以先按下前 缀，Emacs会等待你按下剩余的快捷键，这样Emacs中的快捷键按起来非常的方便。
** keymap
键盘映射. Emacs的快捷键是通过keymap来控制的. 有全局和局部的keymap. 每个mode都会有一个自己的局部的keymap, 局部的keymap会覆盖全局的keymap, 另外如果对应的major mode有开启的minor mode, 而且这个minor mode有keymap的话, 这个minor mode的keymap会覆盖major mode的keymap.

* 帮助系统
Emacs的文档非常丰富, 有Elisp自己的自文档, 还有更详细的info. Elisp中的变量, 函数都有文档. 对于大多数情况都够用了.

info使用：
: h(how2), d(回到根), ?(命令列表), q(退出), m(菜单选择), n(下一个), p(上一个), u(上一层节点)

| 快捷键     | 命令                     | 说明                                                                           |
|------------+--------------------------+--------------------------------------------------------------------------------|
| C-h ?      | M-x help                 | 关于帮助系统的帮助，可以通过SPC和DEL键滚动，通过ESC退出                        |
| C-h t      | M-x help-with-tutorial   | 进入 《Emacs 快速指南》                                                        |
| C-h r      | M-x info-emacs-manual    | Emacs使用手册                                                                  |
| C-h i      | M-x info                 | 《Emacs说明》                                                                  |
| C-h a      | M-x apropos-command      | 搜索命令，缺点：不能用自动补全                                                 |
| C-h v      | M-x describe-variable    | 查看变量说明                                                             |
| C-h f      | M-x describe-function    | 查看函数说明                                                             |
| C-h m      | M-x describe-mode        | 查看当前mode的相关文档，包含mode中的命令、快捷键等        |
| C-h k KEYS | M-x describe-key KEYS    | 查看快捷键对应的命令及其简要说明，比如C-h k C-x C-c，会告诉你C-x C-c是做什么的 |
| C-h c KEYS | M-x describe-key-briefly | 查看键绑定说明                                                          |
| C-h w      | M-x where-is             | 查看某个命令对应的快捷键，缺点：必须知道开头字母；优点：可使用自动补全 |
| C-h b      | M-x describe-bindings    | 查看当前buffer所有的快捷键列表                                     |
| KEYS C-h   |                          | 查看当前buffer中以某个快捷键序列开头的快捷键列表，比如C-c C-h |
|            | M-x apropos              | 查看匹配某个关键词的任何东西，如函数，变量，命令，模式等 |
|            | M-x find-function        | 查看函数的代码                                                          |
|            | M-x find-variable        | 查看变量的代码                                                          |

* 配置方法
** 执行Elisp代码
    1. 在某条语句后面按C-x C-e (eval-last-sexp)可以执行那条语句
    2. M-x eval-buffer 可以执行当前buffer内的Elisp代码
    3. 选中一个region后, M-x eval-region可以执行这个region内的代码
** 安装插件
Emacs的插件一般都是一个以el为后缀名的文件, 把这个文件下载下来后放到一个目录, 比如~/emacs/lisps, 然后执行下面这两条语句:
#+BEGIN_SRC elisp
(add-to-list 'load-path "~/emacs/lisps")
(require 'pluginname)
#+END_SRC
** 快捷键
定制全局绑定global-set-key, 绑定某个mode的快捷键用define-key. global-set-key的定义为:
#+BEGIN_SRC elisp
(global-set-key key command)
#+END_SRC
比如想把C-j绑定到”到达指定行上”(goto-line), 这样就可以了:
: (global-set-key (kbd "C-j") 'goto-line)
kbd是Emacs的宏, 把快捷键转换为Emacs的内部按键表示. 然后执行上面那条语句, 就会使你的配置生效. 然后你可以用C-h k检查一下你的定制是否成功了.

如果对于比较复杂的快捷键, 比如Control x F3, 改怎么写呢? 按C-h k(describe-key), 然后再按下Control x F3, Emacs会出现一个”C-x “, 这个就是你要写到kbd宏里面的内容.

如果你想对某个特定模式比如c++-mode进行快捷键定制, 用define-key即可, 对于上面的例子这样写:
: (define-key c++-mode-map (kbd "C-j") 'goto-line)
define-key第一个参数map一般为mode后面直接加”-map”
