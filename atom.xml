<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[时光 &#149 印记]]></title>
  <link href="http://erikge.com/atom.xml" rel="self"/>
  <link href="http://erikge.com/"/>
  <updated>2014-07-05T22:52:22+08:00</updated>
  <id>http://erikge.com/</id>
  <author>
    <name><![CDATA[erik ge]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift的问题]]></title>
    <link href="http://erikge.com/articles/SwiftTroubles"/>
    <updated>2014-06-27T23:37:20+08:00</updated>
    <id>http://erikge.com/articles/SwiftTroubles</id>
    <content type="html"><![CDATA[<p>一种技术的出现解决了一些问题，同时也会带来更多的问题。正因为Swift的高级特性，也由此带来了一些复杂性和一些潜在的问题。</p>

<!--more-->

<h2 id="内存管理">内存管理</h2>

<p>Swift 使用自动引用计数(ARC)来自动管理内存。大部分情况下无需考虑内存的分配和释放，但要注意某些可能会导致内存问题的使用方法。</p>

<h3 id="arc工作原理">ARC工作原理</h3>

<p>强引用(strong reference)：将一个类的实例赋值给一个属性或者常量或者变量，这个属性、常量或者变量就是这个实例的强引用。<br>
弱引用(weak reference)：弱引用不会增加实例的引用计数，因此不会阻止 ARC 销毁被引用的实例。弱引用只能声明为可选类型(optional type)的变量。<br>
无主引用(unowned reference)：无主引用也不强持有实例，但无主引用默认始终有值。无主引用只能定义为非可选类型(non-optional type)。</p>

<p>强引用还存在时，ARC不会释放这个实例。</p>

<h3 id="类实例间的强引用环">类实例间的强引用环</h3>

<p>两个实例相互引用对方作为自己的属性，彼此保持对方的强引用，这样就产生了强引用环，导致这两个实例永远不被释放。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">apartment</span><span class="p">:</span> <span class="n">Apartment</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~deinit Person&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Apartment</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">tenant</span><span class="p">:</span> <span class="n">Person</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~deinit Apartment&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">产生强引用环的情况</span>
</span><span class='line'><span class="n">var</span> <span class="n">foo</span><span class="p">:</span> <span class="n">Person</span><span class="err">?</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="n">var</span> <span class="n">house</span><span class="p">:</span> <span class="n">Apartment</span><span class="err">?</span> <span class="o">=</span> <span class="n">Apartment</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tmp</span><span class="o">.</span><span class="n">apartment</span> <span class="o">=</span> <span class="n">house</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">house</span><span class="err">!</span><span class="o">.</span><span class="n">tenant</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'><span class="o">//</span> <span class="err">即便都置为</span><span class="n">nil</span><span class="err">也无法释放资源</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">nil</span>
</span><span class='line'><span class="n">house</span> <span class="o">=</span> <span class="n">nil</span>
</span></code></pre></td></tr></table></div></figure>
通过弱引用或无主引用来解决这个问题。如果生命周期中，引用（上例中的属性）有时有值，有时为nil，使用弱引用；如果始终有值，使用无主引用。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">//</span> <span class="err">通过弱引用解决</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Apartment</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">weak</span> <span class="n">var</span> <span class="n">tenant</span><span class="p">:</span> <span class="n">Person</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~deinit Apartment&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">//</span> <span class="err">通过无主引用解决，如果</span><span class="n">house</span><span class="err">必须有主人的话</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">apartment</span><span class="p">:</span> <span class="n">Apartment</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~deinit Person&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Apartment</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">unowned</span> <span class="n">var</span> <span class="n">tenant</span><span class="p">:</span> <span class="n">Person</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">person</span><span class="p">:</span> <span class="n">Person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tenant</span> <span class="o">=</span> <span class="n">person</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~deinit Apartment&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">foo</span><span class="p">:</span> <span class="n">Person</span><span class="err">?</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="n">var</span> <span class="n">house</span><span class="p">:</span> <span class="n">Apartment</span><span class="err">?</span> <span class="o">=</span> <span class="n">Apartment</span><span class="p">(</span><span class="n">person</span><span class="p">:</span> <span class="n">foo</span><span class="err">!</span><span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">相互引用</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tmp</span><span class="o">.</span><span class="n">apartment</span> <span class="o">=</span> <span class="n">house</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">house</span><span class="err">!</span><span class="o">.</span><span class="n">tenant</span> <span class="o">=</span> <span class="n">foo</span><span class="err">!</span>
</span><span class='line'><span class="o">//</span> <span class="err">可以正常释放资源</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">nil</span>
</span><span class='line'><span class="n">house</span> <span class="o">=</span> <span class="n">nil</span>
</span></code></pre></td></tr></table></div></figure>

<p>如果无主引用的例子中，Person也一直有Apartment的话，Person中的apartment属性可以使用隐式展开的可选属性。</p>

<h3 id="闭包产生的强引用环">闭包产生的强引用环</h3>

<p>将一个闭包赋值给类实例的某个属性，并且这个闭包使用了实例（访问了实例的某个属性，或调用了实例的某个方法。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">HTMLElement</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="err">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">//</span> <span class="nd">@lazy</span><span class="err">保证初始化完成以及</span> <span class="bp">self</span> <span class="err">确实存在后</span><span class="p">,</span><span class="err">才能访问</span> <span class="n">lazy</span> <span class="err">属性</span>
</span><span class='line'>    <span class="nd">@lazy</span> <span class="n">var</span> <span class="n">asHTML</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">text</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&lt;(self.name)&gt;(text)&lt;/(self.name)&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&lt;(self.name) /&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="err">?</span> <span class="o">=</span> <span class="n">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;~~(name) deinit&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">html</span><span class="p">:</span> <span class="n">HTMLElement</span><span class="err">?</span> <span class="o">=</span> <span class="n">HTMLElement</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;head&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span><span class="err">?</span><span class="o">.</span><span class="n">asHTML</span><span class="p">()</span> <span class="o">//</span> <span class="err">使用闭包后产生了强引用环</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">nil</span> <span class="o">//</span> <span class="n">HTMLElement</span><span class="err">实例和它的闭包都不会被销毁</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以通过闭包占用列表(closuer capture list)解决这个问题。Swift有如下约束：只要在闭包内使用 self 的成员,就要用 self.someProperty 或者
self.someMethod（而非只是 someProperty 或 someMethod）。这可以提醒你可能会不小心就占有了 self，导致强引用环。<br>
占有列表放置在闭包参数列表和返回类型之前。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@lazy</span> <span class="n">var</span> <span class="n">someClosure</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">unowned</span> <span class="bp">self</span><span class="p">]</span> <span class="p">(</span><span class="n">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">stringToProcess</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="ow">in</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">closure</span> <span class="n">body</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@lazy</span> <span class="n">var</span> <span class="n">someClosure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weak</span> <span class="bp">self</span><span class="p">]</span> <span class="ow">in</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">closure</span> <span class="n">body</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'>    <span class="bp">self</span><span class="err">?</span><span class="o">.</span><span class="n">someProperty</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="构造器">构造器</h2>

<p>构造器的部分也挺复杂的，类有一套构造器的规矩，扩展还可以添加新的构造器。其中有哪些问题需要注意？后续补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift的语法细节]]></title>
    <link href="http://erikge.com/articles/SwiftSyntax"/>
    <updated>2014-06-26T14:09:50+08:00</updated>
    <id>http://erikge.com/articles/SwiftSyntax</id>
    <content type="html"><![CDATA[<p>Swift类似脚本语言的高级语法特性，让Swift语言使用起来很直观，很符合人的直觉，整体感觉很简洁很舒服。使用不同编程语言的程序员都能找到熟悉的感觉，这种亲切感必将吸引更多的开发者。<br>
本文总结Swift中需要注意的语法细节，完整的语法说明参考苹果的官方文档<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/">The Swift Programming Language</a>。</p>

<!--more-->

<h2 id="变量名和常量名">变量名和常量名</h2>

<p>变量名、常量名可以使用Unicode字符，但不能包含连线符、制表符、数学符号、箭头和一些保留字符。
如果非要使用保留字符（如关键字）作为变量名，通过反引号（`）将字符包围（如`class`）。</p>

<h2 id="注释">注释</h2>

<p>注释可以嵌套，这样注释大段代码就方便了，只管开头结尾就好，不用担心里面的注释结束符捣乱了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">/*</span> <span class="err">这是第一个多行注释的开头</span>
</span><span class='line'><span class="n">code</span> <span class="n">here</span>
</span><span class='line'><span class="o">/*</span> <span class="err">这是第二个被嵌套的多行注释</span> <span class="o">*/</span>
</span><span class='line'><span class="n">more</span> <span class="n">code</span> <span class="n">here</span>
</span><span class='line'><span class="err">这是第一个多行注释的结尾</span> <span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="数学相关的操作">数学相关的操作</h2>

<h3 id="数值字面量">数值字面量</h3>

<p>整数字面量可以是十进制、二进制、八进制、十六进制
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">decimalInteger</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'><span class="n">let</span> <span class="n">binaryInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b10001</span>     <span class="o">//</span> <span class="err">二进制的</span> <span class="mi">17</span>
</span><span class='line'><span class="n">let</span> <span class="n">octalInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">o21</span>         <span class="o">//</span> <span class="err">八进制的</span><span class="mi">17</span>
</span><span class='line'><span class="n">let</span> <span class="n">hexadecimalInteger</span> <span class="o">=</span> <span class="mh">0x11</span>   <span class="o">//</span> <span class="err">十六进制的</span> <span class="mi">17</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>浮点字面量可以是十进制、十六进制。小数点两边必须有至少一个数字。有可选的指数，十进制为e、十六进制为p。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">decimalDouble</span> <span class="o">=</span> <span class="mf">12.1875</span>
</span><span class='line'><span class="n">let</span> <span class="n">exponentDouble</span> <span class="o">=</span> <span class="mf">1.21875e1</span>  <span class="o">//</span> <span class="err">十进制指数的</span><span class="mf">12.1875</span>
</span><span class='line'><span class="n">let</span> <span class="n">hexadecimalDouble</span> <span class="o">=</span> <span class="mh">0xC</span><span class="o">.</span><span class="mi">3</span><span class="n">p0</span> <span class="o">//</span> <span class="err">十六进制指数的</span><span class="mf">12.1875</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以添加下划线提高可读性，不影响字面量的值。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">paddedDouble</span> <span class="o">=</span> <span class="mf">000123.456</span>
</span><span class='line'><span class="n">let</span> <span class="n">oneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n"><em>000_000</span>
</span><span class='line'><span class="n">let</span> <span class="n">justOverOneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n"></em>000_000</span><span class="o">.</span><span class="mo">000</span><span class="n">_000_1</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以通过typealias给类型起个更喜欢的别名，如<code>typealias AudioSample = UInt16</code>，这时AudioSample等价于UInt16。</p>

<h3 id="运算符">运算符</h3>

<p>求余运算符。<br>
% 为 求余运算符 或 取模运算符，可以对负数和浮点数操作。被求余数的符号被忽略。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">//</span> <span class="err">等于</span><span class="mi">1</span>
</span><span class='line'><span class="mi">9</span> <span class="o">%</span> <span class="o">-</span><span class="mi">4</span> <span class="o">//</span> <span class="err">和</span> <span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="err">等价，等于</span><span class="mi">1</span>
</span><span class='line'><span class="o">-</span><span class="mi">8</span> <span class="o">%</span> <span class="mf">2.5</span> <span class="o">//</span> <span class="err">等于</span><span class="o">-</span><span class="mf">0.5</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>区间运算符。<br>
<code>a...b</code>表示从a到b(包括 a 和 b)的所有值的闭区间；<code>a..b</code>表示包括a不包括b的前闭后开区间。</p>

<p>溢出运算符。<br>
Swift的数值计算默认是不可溢出的，溢出行为会被捕获并报error。Swift提供了一套以&amp;开头的溢出运算符，包括<code>&amp;+</code>, <code>&amp;-</code>, <code>&amp;*</code>, <code>&amp;/</code>, <code>&amp;%</code>。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">byte_min</span> <span class="o">=</span> <span class="n">Int8</span><span class="o">.</span><span class="n">max</span> <span class="o">&amp;+</span> <span class="mi">1</span> <span class="o">//</span> <span class="o">-</span><span class="mi">128</span>
</span><span class='line'><span class="n">var</span> <span class="n">byte_max</span> <span class="o">=</span> <span class="n">Int8</span><span class="o">.</span><span class="n">min</span> <span class="o">&amp;-</span> <span class="mi">1</span> <span class="o">//</span> <span class="mi">127</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>位运算符。<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">invert</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="o">~</span><span class="mi">0</span><span class="n">b11</span>       <span class="o">//</span> <span class="err">按位取反</span>
</span><span class='line'><span class="n">let</span> <span class="ow">and</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="mh">0xF</span> <span class="o">&amp;</span> <span class="mh">0xF0</span>     <span class="o">//</span> <span class="err">按位与</span>
</span><span class='line'><span class="n">let</span> <span class="ow">or</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="mh">0xF</span> <span class="o">|</span> <span class="mh">0xF0</span>      <span class="o">//</span> <span class="err">按位或</span>
</span><span class='line'><span class="n">let</span> <span class="n">diff</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="mh">0xF</span> <span class="o"><sup></span></sup> <span class="mh">0xF0</span>    <span class="o">//</span> <span class="err">按位异或</span>
</span><span class='line'><span class="n">let</span> <span class="n">left</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="mh">0xFF</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span>     <span class="o">//</span> <span class="err">按位左移</span>
</span><span class='line'><span class="n">let</span> <span class="n">right</span><span class="p">:</span> <span class="n">UInt8</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>       <span class="o">//</span> <span class="err">按位右移</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>运算符函数。<br>
让已有的运算符也可以对自定义的类和结构进行运算，这称为运算符重载。<br>
@infix表示中置运算符，如a + b；<br>
@prefix表示前置运算符，如-a；<br>
@postfix表示后置运算符，如i++；<br>
@assignment表示组合赋值运算符，还需要把左参数设置成 inout，如a += 3；
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">struct</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@infix</span> <span class="n">func</span> <span class="o">+</span> <span class="p">(</span><span class="n">left</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="n">right</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">left</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">right</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">left</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">right</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@prefix</span> <span class="n">func</span> <span class="o">-</span> <span class="p">(</span><span class="n">p</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="o">-</span><span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="o">-</span><span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@assignment</span> <span class="n">func</span> <span class="o">+=</span> <span class="p">(</span><span class="n">inout</span> <span class="n">l</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="n">r</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@prefix</span> <span class="nd">@assignment</span> <span class="n">func</span> <span class="o">++</span> <span class="p">(</span><span class="n">inout</span> <span class="n">p</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">+=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nd">@postfix</span> <span class="n">func</span> <span class="o">++</span> <span class="p">(</span><span class="n">inout</span> <span class="n">p</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">p</span>
</span><span class='line'>    <span class="o">++</span><span class="n">p</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>自定义运算符。<br>
自定义的运算符只能从<code>/ = - + * % &lt; &gt; ! &amp; | ^ ~</code>中选择。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">operator</span> <span class="n">prefix</span> <span class="o">&lt;+&gt;</span> <span class="p">{}</span> <span class="o">//</span> <span class="err">先声明为运算符</span>
</span><span class='line'><span class="nd">@prefix</span> <span class="nd">@assignment</span> <span class="n">func</span> <span class="o">&lt;+&gt;</span> <span class="p">(</span><span class="n">inout</span> <span class="n">p</span><span class="p">:</span> <span class="n">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;+&gt;</span><span class="n">p</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">自定义中置运算符可以定义优先级（默认为</span><span class="mi">100</span><span class="err">）和结合性（默认为</span><span class="n">none</span><span class="err">）</span>
</span><span class='line'><span class="n">operator</span> <span class="n">infix</span> <span class="o">+-</span> <span class="p">{</span> <span class="n">associativity</span> <span class="n">left</span> <span class="n">precedence</span> <span class="mi">140</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
更完整的运算符的优先级和结合性参考<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-XID_655">官方文档</a></p>

<h2 id="字符和字符串">字符和字符串</h2>

<p>字符串字面量可以包含一下特殊字符：</p>

<ol>
<li>转义特殊字符 <code>\0 (空字符)、\\(反斜线)、\t (水平制表符)、\n (换行符)、\r (回车符)、\&quot; (双引号)、\&#39; (单引号)</code>。</li>
<li>单字节 Unicode 标量，写成<code>\xnn</code>,其中 nn 为两位十六进制数。</li>
<li>双字节 Unicode 标量，写成<code>\unnnn</code>,其中 nnnn 为四位十六进制数。</li>
<li>四字节 Unicode 标量，写成<code>\Unnnnnnnn</code>,其中 nnnnnnnn 为八位十六进制数。</li>
</ol>

<p>空字符串定义，二者等价
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">empty1</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">empty2</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>字符串可以通过“＋”拼接，两个Character可以相加得到String。
字符串String可以作为字符Character的集合，可以对其用for-in操作，如 <code>for character in &quot;Dog!???&quot;</code>。</p>

<p>计算字符串中字符的数量，通过全局countElements函数实现。<br>
计算字符串的字节数，可以考虑 utf16count * 2 得到。</p>

<p>字符串比较。可以通过<code>==</code>判断两个字符串包含的字符是否完全相同，通过hasPrefix/hasSuffix判断前缀/后缀是否相等。</p>

<p>可以通过uppercaseString/lowercaseString获得大写/小写版本。<br>
可以通过utf8获得UTF-8单元集合。<br>
可以通过utf16获得UTF-16单元集合。<br>
可以通过unicodeScalars获得21位的标量值集合。</p>

<h2 id="集合类型">集合类型</h2>

<p>Swift提供了数组和字典两种集合类型。</p>

<h3 id="数组">数组</h3>

<p>数组是类型安全的，要求有明确的类型，其中包含的元素的类型必须统一。</p>

<p>数组的定义
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">arrSimple</span><span class="p">:</span> <span class="n">String</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;one&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">arrComp</span><span class="p">:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;one&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;one&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">]</span> <span class="o">//</span> <span class="err">依赖类型推断</span>
</span><span class='line'><span class="o">//</span> <span class="err">定义空数组</span>
</span><span class='line'><span class="n">var</span> <span class="n">emptySimple</span><span class="p">:</span> <span class="n">String</span><span class="p">[]</span> <span class="o">=</span> <span class="n">String</span><span class="p">[]</span> <span class="p">()</span>
</span><span class='line'><span class="n">var</span> <span class="n">emptyComp</span><span class="p">:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'><span class="n">var</span> <span class="n">emptyNotOK</span> <span class="o">=</span> <span class="p">[]</span> <span class="o">//</span> <span class="err">未说明类型，后续无法使用</span>
</span><span class='line'><span class="n">emptySimple</span> <span class="o">=</span> <span class="p">[]</span> <span class="o">//</span> <span class="err">类型已知的情况下，可以用于变为空数组</span>
</span><span class='line'><span class="o">//</span> <span class="err">用重复的值初始化数组</span>
</span><span class='line'><span class="n">var</span> <span class="n">threeDoubles</span> <span class="o">=</span> <span class="n">Double</span><span class="p"><a href="http://erikge.com/span%3E%3Cspan%20class=%22n%22%3Ecount%3C/span%3E%3Cspan%20class=%22p%22%3E:%3C/span%3E%20%3Cspan%20class=%22mi%22%3E3%3C/span%3E%3Cspan%20class=%22p%22%3E,%3C/span%3E%20%3Cspan%20class=%22n%22%3ErepeatedValue%3C/span%3E%3Cspan%20class=%22p%22%3E:%3C/span%3E%3Cspan%20class=%22mf%22%3E0.0%3C/span%3E%3Cspan%20class=%22p%22"></a></span>
</span><span class='line'><span class="n">var</span> <span class="n">anotherThreeDoubles</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="n">count</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">repeatedValue</span><span class="p">:</span> <span class="mf">2.5</span><span class="p">)</span> <span class="o">//</span> <span class="err">不指定类型，依赖类型推断</span>
</span><span class='line'><span class="o">//</span> <span class="n">copy</span><span class="err">创建</span>
</span><span class='line'><span class="n">var</span> <span class="n">arr_new</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="n">arr_old</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>数组的使用
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">String</span><span class="p"><a href=""></a></span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">//</span> <span class="err">内部元素数量</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">isEmpty</span>
</span><span class='line'><span class="o">//</span> <span class="err">最后添加元素</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;newValue&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">arr</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&quot;newValue1&quot;</span><span class="p">,</span> <span class="s">&quot;newValue2&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">//</span> <span class="err">将数组中的一段替换为新值，被替换的部分的长度和新值的长度可以不一致</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mf">1.</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;one&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">,</span> <span class="s">&quot;four&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">//</span> <span class="err">添加、删除</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="s">&quot;insertValue&quot;</span><span class="p">,</span> <span class="n">atIndex</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">removeAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">removeLast</span><span class="p">()</span>
</span><span class='line'><span class="o">//</span> <span class="err">带数组的索引遍历</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">shoppingList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Item (index + 1): (value)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">数组可以相加来合并</span>
</span><span class='line'><span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">arr1</span> <span class="o">+</span> <span class="n">arr2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当数组分配给常量时，数组的长度不能改变，但其中的值还可以改变。</p>

<h3 id="字典">字典</h3>

<p>Swift 的字典使用 Dictionary<KeyType, ValueType>定义,其中KeyType要求是可哈希的。</p>

<p>字典的定义
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">airports</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;TYO&quot;</span><span class="p">:</span> <span class="s">&quot;Tokyo&quot;</span><span class="p">,</span> <span class="s">&quot;DUB&quot;</span><span class="p">:</span> <span class="s">&quot;Dublin&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">airports</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;TYO&quot;</span><span class="p">:</span> <span class="s">&quot;Tokyo&quot;</span><span class="p">,</span> <span class="s">&quot;DUB&quot;</span><span class="p">:</span> <span class="s">&quot;Dublin&quot;</span><span class="p">]</span> <span class="o">//</span> <span class="err">依赖类型推断</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>字典的使用
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">//</span> <span class="err">添加</span>
</span><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;LHR&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;London&quot;</span>
</span><span class='line'><span class="o">//</span> <span class="err">更新</span>
</span><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;LHR&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;London Heathrow&quot;</span>
</span><span class='line'><span class="n">airports</span><span class="o">.</span><span class="n">updateValue</span><span class="p">(</span><span class="s">&quot;London Heathrow&quot;</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span><span class="s">&quot;LHR&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">遍历</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">airportCode</span><span class="p">,</span> <span class="n">airportName</span><span class="p">)</span> <span class="ow">in</span> <span class="n">airports</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;(airportCode): (airportName)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>当字典分配给常量时，大小和其中的键值对都不能更改。</p>

<h2 id="值类型和引用类型">值类型和引用类型</h2>

<p>Swift中的类型可以分为值类型和引用类型。<br>
值类型赋值给变量、常量，或传递给函数参数，或函数返回值时，得到的是新创建的一份拷贝。这样两个变量的后续操作相互独立，不相互影响。<br>
引用类型在代码中传递时，得到的是同一个实例。两个变量的后续操作实际是对同一实例的操作。<br>
引用类似C中的指针、Java中的类对象引用。Swift中也是没有指针、地址等概念的。</p>

<p><strong>值类型：</strong></p>

<ul>
<li>所有的基本类型。整数(Integer)、浮点数(floating-point)、布尔值(Booleans)、字符串(string)、数组(array)和字典(dictionaries)。并且都是以结构体的形式在后台实现。</li>
<li>结构体、枚举。其中包含的任何值类型，在代码中传递时都会被复制。</li>
</ul>

<p><strong>引用类型：</strong></p>

<ul>
<li>类</li>
<li>闭包。闭包包括函数。</li>
</ul>

<p>恒等运算符（恒等<code>===</code>、不恒等<code>!==</code>），判断两个变量、常量是否引用同一个实例的方法。</p>

<p>在实际开发中，并没有必要因为值拷贝的原因减少赋值等传递。因为在实际编译时，编译器会保证复制只发生在绝对必要的情况下以提高性能</p>

<p>集合类型的传递和拷贝行为略有些复杂。集合类型在传递时，先不做拷贝，只有当值发生变化时才执行拷贝。字典在其中的键－值对改变或size改变时，都认为是发生变化，触发拷贝；但数组在修改其中元素时不认为是发生变化，只有在长度改变时才认为是发生变化，才触发拷贝。
数组长度改变的情况包括附加(appending)，插入(inserting)，删除(removing)或者使用范围下标(ranged subscript)去替换这一范围内的元素。</p>

<p>集合类型在拷贝时执行的都是浅拷贝。当其中的元素时引用类型时，拷贝的是引用。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>              <span class="o">//</span> <span class="n">true</span><span class="err">，没</span><span class="n">copy</span><span class="err">，</span><span class="n">a</span><span class="err">修改不认为是变化</span>
</span><span class='line'><span class="n">a</span> <span class="o">===</span> <span class="n">b</span>             <span class="o">//</span> <span class="n">false</span><span class="err">，值类型，返回</span><span class="n">false</span><span class="err">符合语法</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mf">1.</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>              <span class="o">//</span> <span class="n">false</span><span class="err">，发生</span><span class="n">copy</span><span class="err">，</span><span class="n">a</span><span class="err">变化了</span>
</span></code></pre></td></tr></table></div></figure>
触发copy的方法
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">unshare</span><span class="p">()</span>     <span class="o">//</span> <span class="err">触发</span><span class="n">b</span><span class="err">的</span><span class="n">copy</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>       <span class="o">//</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">//</span> <span class="ow">or</span>
</span><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>       <span class="o">//</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="函数">函数</h2>

<p>多返回值。<br>
函数可以返回多个值，以元组的形式实现。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">getPoint</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">getPoint</span><span class="p">()</span>
</span><span class='line'><span class="n">ret</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="n">ret</span><span class="o">.</span><span class="n">y</span>
</span><span class='line'><span class="n">func</span> <span class="n">getInfo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="s">&quot;Not Found&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">info</span> <span class="o">=</span> <span class="n">getInfo</span><span class="p">()</span>
</span><span class='line'><span class="n">info</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">info</span><span class="o">.</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>外部形参名。<br>
函数形参名分为本地形参名和外部形参名。本地形参名只在函数内部有效，外部形参名用于外部调用时声明。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="n">string</span> <span class="n">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toString</span> <span class="n">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">withJoiner</span> <span class="n">joiner</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">join</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="n">toString</span><span class="p">:</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">withJoiner</span><span class="p">:</span> <span class="s">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
外部形参和本地形参同名。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="c">#string: String, #toString: String, #withJoiner: String) -&gt; String {</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span> <span class="o">+</span> <span class="n">withJoiner</span> <span class="o">+</span> <span class="n">toString</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">join</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="n">toString</span><span class="p">:</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">withJoiner</span><span class="p">:</span> <span class="s">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>默认值。<br>
函数形参可以带有默认值，虽然默认值形参可以在任何位置，但是建议放在形参列表的末尾。<br>
Swift为带默认值的形参自动提供了外部形参名，可以通过&quot;_&ldquo;来关闭这种行为
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">jo</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">jo</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">join</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;, &quot;</span><span class="p">)</span> <span class="o">//</span> <span class="err">输出</span> <span class="s">&quot;Hello, world&quot;</span>
</span><span class='line'><span class="n">join</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="s">&quot;Amy&quot;</span><span class="p">,</span> <span class="s">&quot;, &quot;</span><span class="p">)</span> <span class="o">//</span> <span class="err">不使用默认值</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">join2</span><span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">_</span> <span class="n">s2</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">jo</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">jo</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">join2</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;Foo&quot;</span><span class="p">,</span> <span class="s">&quot;, &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可变形参。<br>
传递至可变形参的值在函数主体内是以适当类型的数组存在的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">arithmeticMean</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">Double</span><span class="o">...</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">//</span> <span class="n">todo</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>变量形参。<br>
函数的形参默认是常量。试图在函数体内改变函数形参的值会引发一个编译时错误。
可以通过使用变量形参，在函数内得到一个有形参值的变量副本。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">add</span><span class="p">(</span><span class="n">var</span> <span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In-Out形参。<br>
只能传递一个变量作为 in-out 形参对应的实参，变量前加&amp;号。
不能传递一个常量或者字面量作为实参,因为常量和字面量不能被修改。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">swap</span><span class="p">(</span><span class="n">inout</span> <span class="n">a</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span> <span class="n">inout</span> <span class="n">b</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">9</span>
</span><span class='line'><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">x</span> <span class="o">//</span> <span class="mi">9</span>
</span><span class='line'><span class="n">y</span> <span class="o">//</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>嵌套函数。<br>
除了在全局作用域中定义的全局函数外，还可以在函数体内部定义嵌套函数。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">chooseStepFunction</span><span class="p">(</span><span class="n">backwards</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">stepForward</span><span class="p">(</span><span class="nb">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">input</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">stepBackward</span><span class="p">(</span><span class="nb">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">input</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">backwards</span> <span class="err">?</span> <span class="n">stepBackward</span> <span class="p">:</span> <span class="n">stepForward</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="类和结构体">类和结构体</h2>

<p>类和结构体有很多共同点：</p>

<ul>
<li>定义属性用于储存值</li>
<li>定义方法用于提供功能</li>
<li>定义下标用于通过下标语法访问值</li>
<li>定义初始化器用于生成初始化值</li>
<li>通过扩展以增加默认实现的功能</li>
<li>符合协议以对某类提供标准功能</li>
</ul>

<p>与结构体相比,类还有如下的附加功能：</p>

<ul>
<li>继承允许一个类继承另一个类的特征</li>
<li>类型转换允许在运行时检查和解释一个类实例的类型</li>
<li>取消初始化器允许一个类实例释放任何其所被分配的资源</li>
<li>引用计数允许对一个类的多次引用</li>
</ul>

<p>定义：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="k">class</span> <span class="nc">definition</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">struct</span> <span class="n">SomeStructure</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">structure</span> <span class="n">definition</span> <span class="n">goes</span> <span class="n">here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="属性">属性</h3>

<p>属性部分包含：</p>

<ol>
<li>存储属性。存储常量、变量，可用于类和结构体</li>
<li>计算属性。计算值，可用于类、结构体和枚举</li>
<li>属性监视器。监控属性值的变化</li>
</ol>

<p>存储属性。<br>
@lazy标示的为延迟存储属性，创建时为nil，在第一次被调用时才初始化。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Lazy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">left</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="nd">@lazy</span> <span class="n">var</span> <span class="n">top</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>计算属性。<br>
计算属性不直接存储值，提供一个get来获取值，一个可选的set来设置值。只实现get，不实现set时，为只读属性。计算属性只能通过var来定义。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">struct</span> <span class="n">Range</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">normal</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Getter&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">set</span> <span class="p">(</span><span class="n">new_str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="n">new_str</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">quick</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mf">1.0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">set</span> <span class="p">{</span> <span class="o">//</span> <span class="err">默认参数名为</span> <span class="n">newValue</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">quickReadOnly</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">ran</span> <span class="o">=</span> <span class="n">Range</span><span class="p">()</span>
</span><span class='line'><span class="n">ran</span><span class="o">.</span><span class="n">normal</span>
</span><span class='line'><span class="n">ran</span><span class="o">.</span><span class="n">normal</span> <span class="o">=</span> <span class="s">&quot;aabbcc&quot;</span>
</span><span class='line'><span class="n">ran</span><span class="o">.</span><span class="n">quickReadOnly</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>属性监视器。<br>
可以为除了延迟存储属性之外的其他存储属性添加属性监视器，也可以通过重载属性的方式为继承的属性(包括存储属性和计算属性)添加属性监视器。<br>
willSet 在设置新的值之前调用，将新的值作为参数传入，默认名称为newValue。didSet 在新的值被设置之后立即调用，将旧的属性值作为参数传入，默认名称为oldValue。<br>
willSet 和 didSet 监视器在属性初始化过程中不会被调用，他们只会当属性的值在初始化之外的地方被设置时被调用。</p>

<p>计算属性和存储型属性监视器所描述的模式也可以用于全局变量和局部变量，即可定义计算型变量和为存储型变量定义监视器。</p>

<p>类型属性。<br>
上述的属性在实例之间相互独立，属于实例属性。也可以为类型定义类型属性，不管有多少实例，这些属性都只有一份。<br>
对于值类型(指结构体和枚举)可以定义存储型和计算型类型属性，对于类(class)则只能 定义计算型类型属性。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">struct</span> <span class="n">SomeStruct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">static</span> <span class="n">let</span> <span class="nb">property</span> <span class="o">=</span> <span class="s">&quot;structure&quot;</span>
</span><span class='line'>    <span class="n">static</span> <span class="n">var</span> <span class="nb">type</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">enum</span> <span class="n">SomeEnum</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">static</span> <span class="n">let</span> <span class="nb">property</span> <span class="o">=</span> <span class="s">&quot;enumeration&quot;</span>
</span><span class='line'>    <span class="n">static</span> <span class="n">var</span> <span class="nb">type</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">var</span> <span class="nb">type</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">SomeStruct</span><span class="o">.</span><span class="n">type</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="方法">方法</h3>

<p>类、结构体、枚举都可以定义实例方法或类型方法。方法自动为第二个参数和后续所有参数提供同名外部参数名称，可以自己指定外部参数名，或通过&rdquo;_&ldquo;关闭默认行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Counter</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">increase</span><span class="p">(</span><span class="n">amout</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">times</span> <span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">+=</span> <span class="n">amout</span> <span class="o">*</span> <span class="n">times</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">increase</span><span class="p">(</span><span class="n">amout</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">numberOfTimes</span> <span class="n">times</span> <span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">+=</span> <span class="n">amout</span> <span class="o">*</span> <span class="n">times</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">increase</span><span class="p">(</span><span class="n">amout</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">_</span> <span class="n">times</span> <span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="n">amout</span> <span class="o">*</span> <span class="n">times</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">var</span> <span class="n">ins</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
</span><span class='line'><span class="n">ins</span><span class="o">.</span><span class="n">increase</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">times</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">ins</span><span class="o">.</span><span class="n">increase</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">numberOfTimes</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">ins</span><span class="o">.</span><span class="n">increase</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>另外一个值得注意的问题是，结构体和枚举是值类型。一般情况下，值类型的属性不能在它的实例方法中被修改。如果方法需要修改结构体内容，需要用mutating显式声明。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">enum</span> <span class="n">TriState</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Off</span><span class="p">,</span> <span class="n">Low</span><span class="p">,</span> <span class="n">High</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="nb">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">switch</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">case</span> <span class="o">.</span><span class="n">Off</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">Low</span>
</span><span class='line'>            <span class="n">case</span> <span class="n">Low</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span> <span class="o">=</span> <span class="n">High</span>
</span><span class='line'>            <span class="n">case</span> <span class="n">High</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span> <span class="o">=</span> <span class="n">Off</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">light</span> <span class="o">=</span> <span class="n">TriState</span><span class="o">.</span><span class="n">High</span>
</span><span class='line'><span class="n">light</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">light</span> <span class="o">==</span> <span class="o">.</span><span class="n">Off</span> <span class="o">//</span> <span class="n">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>类型方法，被类型本身调用的方法。<br>
声明类的类型方法，在方法的 func 关键字之前加上关键字 class；声明结构体和枚举的类型方法，在方法的 func 关键字之前加上关键字 static。</p>

<h3 id="结构体">结构体</h3>

<p>结构体有一个自动生成的成员逐一初始化器，用于初始化新结构体实例中的所有成员属性。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">struct</span> <span class="n">Resolution</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">heigth</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">vga</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">(</span><span class="n">width</span><span class="p">:</span><span class="mi">640</span><span class="p">,</span> <span class="n">heigth</span><span class="p">:</span> <span class="mi">480</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="附属脚本">附属脚本</h3>

<p>附属脚本附属脚本可以定义在类(Class)、结构体(structure)和枚举(enumeration)这些目标中，允许你通过在实例后面的方括号中传入一个或者多个的索引值来对实例进行访问和赋值，类似于数组、字典的使用方法。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">subscript</span><span class="p">(</span><span class="n">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">//</span> <span class="err">返回与入参匹配的</span><span class="n">Int</span><span class="err">类型的值</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">set</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">//</span> <span class="err">执行赋值操作</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="类">类</h3>

<h4 id="继承">继承</h4>

<p>子类可以调用、访问、重写（override）超类的方法（实例方法和类方法），属性（实例属性和类属性）和附属脚本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Vehicle</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">wheels</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">passengers</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">wheels</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>        <span class="n">passengers</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">deinit</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">description</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;This is a Vehicle&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Vehicle&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bicycle</span> <span class="p">:</span> <span class="n">Vehicle</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>        <span class="n">wheels</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">description</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;This is a Bicycle&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">var</span> <span class="n">passengers</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">super</span><span class="o">.</span><span class="n">passengers</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">set</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="o">.</span><span class="n">passengers</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">newValue</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="k">class</span> <span class="nc">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Bicycle&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">Vehicle</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="n">Bicycle</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="n">var</span> <span class="n">bi</span> <span class="o">=</span> <span class="n">Bicycle</span><span class="p">()</span>
</span><span class='line'><span class="n">bi</span><span class="o">.</span><span class="n">passengers</span> <span class="o">=</span> <span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>

<p>初始化器默认是不继承的，所以子类中调用super.init()保证使用父类的属性前已经初始化完成。<br>
通过super来访问父类。<br>
通过override显式声明重载。<br></p>

<p>@final可以防止override。
<code>@final var</code>，<code>@final func</code>，<code>@final class func</code>，以及<code>@final subscript</code>不能被重写。
<code>@final class</code>的类不可被继承。</p>

<h4 id="属性观察器（property-observer）-willset/didset">属性观察器（property observer） willSet/didSet</h4>

<p>可以为继承来的存储型或计算型属性、自己创建的存储型属性添加属性观察器；
不可以为常量存储型属性、只读计算型属性添加属性观察器，因为不会用到；
不可以同时提供set和属性观察器，因为set中就可以得到属性的变化。</p>

<h2 id="类型转换">类型转换</h2>

<p>类型转换在Swift中使用 is 和 as 操作符实现。这两个操作符提供了一种简单达意的方式去检查值的类型和转换它的类型。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Media</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Movie</span><span class="p">:</span> <span class="n">Media</span> <span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Song</span><span class="p">:</span> <span class="n">Media</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">library</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">Movie</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Matrix&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Song</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;only&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Movie</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Hi&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">//</span> <span class="err">类型检查：</span><span class="ow">is</span>
</span><span class='line'><span class="n">var</span> <span class="n">isMovie</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'><span class="k">if</span> <span class="n">library</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="n">Movie</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">isMovie</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>类型转换as有两种不同的形式。可选形式as?返回一个Optional值；强制形式as转型后强制解包。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">unknownType</span> <span class="o">=</span> <span class="n">library</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">unknownType</span> <span class="k">as</span><span class="err">?</span> <span class="n">Movie</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">movie</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">unknownType</span> <span class="ow">is</span> <span class="n">Movie</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">unknownType</span> <span class="k">as</span> <span class="n">Movie</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">unknownType</span> <span class="ow">is</span> <span class="n">Song</span><span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">song</span> <span class="o">=</span> <span class="n">unknownType</span> <span class="k">as</span> <span class="n">Song</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Swift为不确定类型提供了两种特殊类型别名:</p>

<ol>
<li>AnyObject 可以代表任何 class 类型的实例。</li>
<li>Any 可以表示任何类型，除了方法类型(function types)。</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">things</span> <span class="o">=</span> <span class="n">Any</span><span class="p">[]()</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="mf">3.14159</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="n">things</span> <span class="o">+=</span> <span class="p">(</span><span class="mf">3.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">thing</span> <span class="ow">in</span> <span class="n">things</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">switch</span> <span class="n">thing</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="mi">0</span> <span class="k">as</span> <span class="n">Int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;0 as an Int&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="mi">0</span> <span class="k">as</span> <span class="n">Double</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;0 as a Double&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">let</span> <span class="n">someInt</span> <span class="k">as</span> <span class="n">Int</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Int: \(someInt)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">let</span> <span class="n">someDouble</span> <span class="k">as</span> <span class="n">Double</span> <span class="n">where</span> <span class="n">someDouble</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Positive double: \(someDouble)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="ow">is</span> <span class="n">Double</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;other Double&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">as</span> <span class="p">(</span><span class="n">Double</span><span class="p">,</span> <span class="n">Double</span><span class="p">):</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Point: \(x), \(y)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">default</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;something else&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="编程小技巧">编程小技巧</h2>

<ol>
<li>断言带可选的说明信息<code>assert(age &gt;= 0, &quot;A person&#39;s age cannot be less than zero&quot;)</code></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift语法糖]]></title>
    <link href="http://erikge.com/articles/SwiftCandy"/>
    <updated>2014-06-20T17:34:28+08:00</updated>
    <id>http://erikge.com/articles/SwiftCandy</id>
    <content type="html"><![CDATA[<p>Swift中引入了很多高级语言的特性，如闭包、命名空间、泛型、强类型（同时拒绝阴式类型转换）、多个返回值（元组）等等，这些高级的语法糖用好了可以极大提升工作效率，用不好也是语法坑。<br>
我们先体验一下Swift的糖衣炮弹。</p>

<!--more-->

<h2 id="闭包">闭包</h2>

<p>闭包是功能性自包含模块，可以在代码中被传递和使用。<br>
闭包可以 <strong>捕获</strong> 和存储其所在上下文中任意常量和变量的引用，这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift会管理在捕获过程中涉及到的内存操作。</p>

<p>全局和嵌套函数实际上也是特殊的闭包，闭包采取如下三种形式之 一：</p>

<ol>
<li>全局函数是一个有名字但不会捕获任何值的闭包</li>
<li>嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包</li>
<li>闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的没有名字的闭包</li>
</ol>

<p>闭包表达式比较像其他一些编程语言中的lambdas，拥有一些简洁的语法风格：</p>

<ul>
<li>利用上下文推断参数和返回值类型</li>
<li>单表达式(single-expression)闭包可以省略 return 关键字</li>
<li>参数名称简写</li>
<li>Trailing 闭包语法</li>
</ul>

<p>闭包表达式语法：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span> <span class="p">(</span><span class="n">parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">returnType</span> <span class="ow">in</span>
</span><span class='line'>    <span class="n">statements</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
闭包表达式语法可以使用常量、变量和 inout 类型作为参数，但不提供默认值。也可以在参数列表的最后使用可变参数。元组也可以作为参数和返回值。<br>
举个栗子。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="ow">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
因为排序闭包时作为函数参数进行传入的，函数参数的类型是确定的，即(String, String) -&gt; Bool的闭包。所以，闭包的类型可以被自动推断。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="ow">in</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">可以写在同一行，更加简洁</span>
</span><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="ow">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
单表达式闭包可以省略 return 关键字
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="ow">in</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
参数名简写，可以通过$0,$1,$2等位置引用参数，从0开始
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
运算符函数，大于号（&gt;）函数的类型正好和sort参数的类型一致，所以可以直接传入&gt;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
Trailing 闭包 的写法。当函数只需要闭包一个参数时，甚至可以省略括号
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">reversed</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>捕获的常量和变量在超出原作用域之后仍然可以使用。而且不同的闭包捕获后存储的变量和常量是相互独立的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">makeIncrease</span><span class="p">(</span><span class="n">increaseStep</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">increase</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">increaseStep</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">increase</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">let</span> <span class="n">increaseTen</span> <span class="o">=</span> <span class="n">makeIncrease</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">increaseTen</span><span class="p">()</span>   <span class="o">//</span> <span class="mi">10</span>
</span><span class='line'><span class="n">increaseTen</span><span class="p">()</span>   <span class="o">//</span> <span class="mi">20</span>
</span><span class='line'><span class="n">let</span> <span class="n">increaseSeven</span> <span class="o">=</span> <span class="n">makeIncrease</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">increaseSeven</span><span class="p">()</span> <span class="o">//</span> <span class="mi">7</span>
</span><span class='line'><span class="n">increaseTen</span><span class="p">()</span>   <span class="o">//</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="元组">元组</h2>

<p>把多个值用()组合在一起就成了元组，元组内的值可以是任意类型，并且不要求是相同类型。<br>
元组比较适合临时组织值，不适合创建复杂的数据结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">http404Error</span> <span class="o">=</span> <span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s">&quot;Not Found&quot;</span><span class="p">)</span> <span class="o">//</span> <span class="err">类型是</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">获取其中的值</span>
</span><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">statusMessage</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The status code is \(statusCode), message is \(statusMessage)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">只获取关心的值</span>
</span><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">justTheStatusCode</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>
</span><span class='line'><span class="o">//</span> <span class="err">通过下标获取对应的值，从零开始</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The status code is \(http404Error.0), message is \(http404Error.1)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">元组定义时可以给其中的元素命名</span>
</span><span class='line'><span class="n">let</span> <span class="n">http200Status</span> <span class="o">=</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">//</span> <span class="err">有名字后可以通过名字访问</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The status code is \(http200Status.statusCode), message is \(http200Status.description)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="枚举">枚举</h2>

<p>Swift中，枚举是一等（first-class）类型，不同于C语言中枚举是一组整型值。所以Fruit.Apple并不对应任何值。<br>
使用枚举时，如果类型已知，可以直接通过.Apple这种方式来使用；如果类型未知，通过全名Fruit.Apple来使用。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">enum</span> <span class="n">Fruit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Apple</span><span class="p">,</span> <span class="n">Banana</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Orange</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">toString</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">switch</span> <span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">case</span> <span class="o">.</span><span class="n">Apple</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Apple&quot;</span>
</span><span class='line'>            <span class="n">case</span> <span class="o">.</span><span class="n">Orange</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Orange&quot;</span>
</span><span class='line'>            <span class="n">case</span> <span class="o">.</span><span class="n">Banana</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Banana&quot;</span>
</span><span class='line'>            <span class="n">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Unkown&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">var</span> <span class="n">something</span> <span class="o">=</span> <span class="n">Fruit</span><span class="o">.</span><span class="n">Apple</span>
</span><span class='line'><span class="n">something</span> <span class="o">=</span> <span class="o">.</span><span class="n">Banana</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>枚举的特点在于可以关联原始值或实例值。不关联、原始值、实例值只能取其一，即关联了原始值就不能再关联实例值。</p>

<p>原始值对所有枚举的实例都是相同的。原始值工作的像C++、Java等语言的枚举值一样。
原始值可以是字符串，字符，或者任何整型值或浮点型值。每个原始值在它的枚举声明中必须是唯一的。
关联原始值后，枚举可以通过toRaw()得到原始值，通过frowRaw()创建枚举值。如果传给frowRaw()的值未在枚举中定义，会返回nil。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">enum</span> <span class="n">Fruit</span><span class="p">:</span><span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Apple</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Orange</span><span class="p">,</span> <span class="n">Banana</span><span class="p">,</span> <span class="n">Peach</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Fruit</span><span class="o">.</span><span class="n">Orange</span>
</span><span class='line'><span class="n">value</span><span class="o">.</span><span class="n">toRaw</span><span class="p">()</span>                       <span class="o">//</span> <span class="mf">8.0</span>
</span><span class='line'><span class="n">var</span> <span class="n">outOfRange</span> <span class="o">=</span> <span class="n">Fruit</span><span class="o">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="mf">3.0</span><span class="p">)</span> <span class="o">//</span> <span class="err">返回值为</span><span class="n">nil</span>
</span><span class='line'><span class="n">outOfRange</span><span class="err">?</span><span class="o">.</span><span class="n">toRaw</span><span class="p">()</span>                 <span class="o">//</span> <span class="err">返回值为</span><span class="n">nil</span>
</span></code></pre></td></tr></table></div></figure>
枚举关联实例值时，可以将枚举想象为一个容器，里面可以装一个或多个值，这些值是在创建实例时放进去的，不同的实例放的值不同。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">enum</span> <span class="n">Fruit</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Apple</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Orange</span><span class="p">(</span><span class="n">String</span><span class="p">),</span> <span class="n">Banana</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span> <span class="n">Peach</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">apple</span> <span class="o">=</span> <span class="n">Fruit</span><span class="o">.</span><span class="n">Apple</span><span class="p">(</span><span class="s">&quot;Price:32&quot;</span><span class="p">,</span><span class="s">&quot;Size:4&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">switch</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">let</span> <span class="o">.</span><span class="n">Apple</span><span class="p">(</span><span class="n">price</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Info: (price), (size)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="o">.</span><span class="n">Orange</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;orange&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">default</span><span class="p">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;default&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="泛型">泛型</h2>

<p>泛型可用于函数、类、枚举和结构体。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">repeat</span><span class="o">&lt;</span><span class="n">ItemType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="n">ItemType</span><span class="p">,</span> <span class="n">times</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ItemType</span><span class="p">[]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ItemType</span><span class="p"><a href=""></a></span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="mf">0.</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="n">item</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">repeat</span><span class="p">(</span><span class="s">&quot;knock&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
可以在类型后面使用where来指定一个需求列表
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span> <span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span> <span class="n">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">U</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="p">:</span> <span class="n">Equatable</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span> <span class="o">==</span> <span class="n">U</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">more</span> <span class="k">def</span> <span class="nf">here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在限制条件比较简单的情况下，可以不用where，如<code>&lt;T:Equatable&gt;</code>和<code>&lt;T where T:Equatable&gt;</code>等价。</p>

<h2 id="optional值">Optional值</h2>

<p>Swift中常量（let）定义时必须赋初始值，变量（var）可以不赋值，但需要显示指定类型，如<code>var value : Int</code>。
Swift不自动给变量赋初始值，变量使用前必须初始化。</p>

<p>如果使用时还无法确定初始值，那就需要用到Optional值了，一个未赋值的Optional值会被自动设置为nil。Optional可以通过?来使用。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">//</span> <span class="err">声明</span><span class="n">Optional</span><span class="err">值变量</span>
</span><span class='line'><span class="n">var</span> <span class="n">shape</span><span class="p">:</span><span class="n">Shape</span><span class="err">?</span> <span class="o">=</span> <span class="n">nil</span>
</span><span class='line'><span class="o">//</span> <span class="err">对</span><span class="n">Optional</span><span class="err">值操作时，需要做空值判断，判断是否能响应后面的操作。</span>
</span><span class='line'><span class="o">//</span> <span class="err">如果</span><span class="n">shape</span><span class="err">为</span><span class="n">nil</span><span class="err">，则?之后的被忽略，返回</span><span class="n">nil</span><span class="err">；否则执行?后的代码</span>
</span><span class='line'><span class="n">let</span> <span class="n">value</span> <span class="o">=</span> <span class="n">shape</span><span class="err">?</span><span class="o">.</span><span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>
函数的返回值也可以是Optional值，即可能返回nil
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">func</span> <span class="n">getSomeValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="err">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
实际上，Optional是个enum，其中定义了None和Some两种类型。nil就等价于Optional.None。所以在使用Optional值时，如调用方法、属性、下标索引等，必须在Optional值后面加?来使用，不然会有语法错误。?是Optional定义的一种快捷的拆包方式。Optional的定义如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">enum</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">LogicValue</span><span class="p">,</span> <span class="n">Reflectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">Some</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="n">some</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">///</span> <span class="n">Allow</span> <span class="n">use</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">Boolean</span> <span class="n">context</span><span class="o">.</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">getLogicValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">///</span> <span class="n">Haskell</span><span class="s">&#39;s fmap, which was mis-named </span>
</span><span class='line'>    <span class="n">func</span> <span class="nb">map</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="err">?</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">getMirror</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Mirror</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
那除了后面加?之外，还有没有别的拆包方法呢？有的，有两种：</p>

<ol>
<li>Optional Binding，可以用在if和while语句中
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">value</span> <span class="p">:</span> <span class="n">String</span><span class="err">?</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">value</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">hashStr</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">.</span><span class="n">hashValue</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>
<li>后面加!号，表示确定非nil，强制拆包。当然，如果是nil的话会crash
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">value</span> <span class="p">:</span> <span class="n">String</span><span class="err">?</span>
</span><span class='line'><span class="n">value</span><span class="err">!</span><span class="o">.</span><span class="n">hashValue</span>
</span></code></pre></td></tr></table></div></figure>
哇！还有一个!号，对，!号还有一个用法，就是用来声明隐式拆包的Optional
（Implicitly Unwrapped Optionals），这样对变量操作时，会自动补上一个!进行拆包。当然，自己补上!?也是可以的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">value</span> <span class="p">:</span> <span class="n">String</span><span class="err">!</span>
</span><span class='line'><span class="n">value</span><span class="o">.</span><span class="n">hashValue</span> <span class="o">//</span> <span class="err">语法</span><span class="n">OK</span><span class="err">，但是会</span><span class="n">crash</span>
</span><span class='line'><span class="n">value</span><span class="err">!</span><span class="o">.</span><span class="n">hashValue</span> <span class="o">//</span> <span class="err">语法</span><span class="n">OK</span><span class="err">，但是会</span><span class="n">crash</span>
</span><span class='line'><span class="n">value</span><span class="err">?</span><span class="o">.</span><span class="n">hashValue</span> <span class="o">//</span> <span class="err">语法</span><span class="n">OK</span><span class="err">，不会</span><span class="n">crash</span>
</span></code></pre></td></tr></table></div></figure>
Optional是够复杂的，把整个Swift语法简洁漂亮的美好形象都打破了，有没有？好吧，我保证这绝对是本文里面语法最复杂的部分了，后面不再会超出你的想像了。来个测试试试看，下面这段代码会打印出啥？答案在<a href="#answer">最下方</a>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">optval</span><span class="p">:</span> <span class="n">Bool</span><span class="err">?</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span>               <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span><span class="err">!</span>              <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span> <span class="o">==</span> <span class="n">true</span>       <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span><span class="err">!</span> <span class="o">==</span> <span class="n">true</span>      <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;4&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span> <span class="o">==</span> <span class="n">false</span>      <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;5&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="n">optval</span><span class="err">!</span> <span class="o">==</span> <span class="n">false</span>     <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">&quot;6&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></li>
</ol>

<h2 id="流控制">流控制</h2>

<p>switch case的语法特别丰富。一个case可以匹配多个模式，用逗号分开；也可以匹配范围。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">switch</span> <span class="n">count</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;no&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;a few&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="mf">4.</span><span class="o">..</span><span class="mi">100</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;a lot of&quot;</span>
</span><span class='line'>    <span class="n">default</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;too many&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>switch也可以匹配元组；可以值绑定（Value Bindings）；可以通过where添加额外判断条件。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">let</span> <span class="n">somePoint</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">switch</span> <span class="n">somePoint</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;at the origin&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">(</span><span class="n"><em></span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;on the x-axis&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">(</span><span class="o">-</span><span class="mf">2.</span><span class="o">..</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.</span><span class="o">..</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;inside the box&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">let</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;on the y-axis, and y = (y)&quot;</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">var</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="n">where</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;on the line at ((x), (y))&quot;</span>
</span><span class='line'>    <span class="n">default</span><span class="p">:</span>
</span><span class='line'>        <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;nowhere&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">switch</span><span class="err">不需要</span><span class="k">break</span><span class="err">，执行完一个</span><span class="n">case</span><span class="err">后推出整个</span><span class="n">switch</span><span class="err">。如果需要</span><span class="n">C</span><span class="err">语言中执行完一个</span><span class="n">case</span><span class="err">落入下一个</span><span class="n">case</span><span class="err">中的情况，需要用到</span> <span class="o"><strong></span><span class="n">fallthrough</span><span class="o"></strong></span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">当多个流控制代码块相互套嵌时，可以通过标签来明确跳出位置。</span>
</span></code></pre></td></tr></table></div></figure> python
gameLoop: while square != finalSquare {
    if some {
        value = 3
    } else if some == 7 {
        break gameLoop
    }
}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sb">`<code>&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;</code></span> <span class="n">python</span>
</span><span class='line'><span class="o">//</span> <span class="err">不需要用到循环的值</span>
</span><span class='line'><span class="k">for</span> <span class="n"></em></span> <span class="ow">in</span> <span class="mf">1.</span><span class="o">..</span><span class="n">power</span> <span class="p">{</span>
</span><span class='line'><span class="n">answer</span> <span class="o">*=</span> <span class="n">base</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">C</span><span class="err">样式的</span><span class="k">for</span><span class="err">循环</span>
</span><span class='line'><span class="k">for</span> <span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">{</span>
</span><span class='line'><span class="o">//</span> <span class="n">todo</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="协议和扩展">协议和扩展</h2>

<h3 id="协议/接口">协议/接口</h3>

<p>协议的例子如下，
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">protocol</span> <span class="n">Speak</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">des</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="n">get</span><span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">num</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span><span class="n">get</span> <span class="nb">set</span><span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">say</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">var</span> <span class="n">man</span> <span class="p">:</span> <span class="n">Speak</span><span class="err">?</span> <span class="o">=</span> <span class="n">nil</span>
</span></code></pre></td></tr></table></div></figure>
其中，get用于控制访问权限，表明只能获取不能设置；mutating表示say方法可以修改内部内容，
class默认可以修改类，无需声明，struct需要通过mutating声明会修改结构体内容。
协议方法的声明与普通方法声明相似，支持变长参数(variadic parameter)，但不支持默认参数(default parameter)。</p>

<p>类、结构体、枚举都可以实现接口。</p>

<p>协议继承。<br>
能够继承一个或多个其他协议。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">protocol</span> <span class="n">InheritingProtocol</span><span class="p">:</span> <span class="n">SomeProtocol</span><span class="p">,</span> <span class="n">AnotherProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="err">协议定义</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>协议合成。<br>
多个协议可以通过<code>protocol&lt;SomeProtocol, AnotherProtocol&gt;</code>合成一个临时协议。协议合成可以用于要求变量、参数遵循合成的协议中的所有协议。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">protocol</span> <span class="n">Named</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="n">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">protocol</span> <span class="n">Aged</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">age</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span><span class="n">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">hello</span><span class="p">(</span><span class="n">someone</span><span class="p">:</span><span class="n">protocol</span><span class="o">&lt;</span><span class="n">Named</span><span class="p">,</span> <span class="n">Aged</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">&quot;hello, (someone.name) (someone.age)&quot;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nb">id</span><span class="p">:</span> <span class="n">protocol</span><span class="o">&lt;</span><span class="n">Named</span><span class="p">,</span> <span class="n">Aged</span><span class="o">&gt;</span><span class="err">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可选协议。<br>
用@objc前缀来表示协议是可选的，协议中用@optional前缀来定义可选成员。
可选成员只能在@objc前缀的可选协议中生效，且可选协议只能被类（class）遵循。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@objc</span> <span class="n">protocol</span> <span class="n">Named</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">name</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="n">get</span><span class="p">}</span>
</span><span class='line'>    <span class="nd">@optional</span> <span class="n">var</span> <span class="n">desp</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span><span class="n">get</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span> <span class="n">Named</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">name</span><span class="p">:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="n">var</span> <span class="n">p</span><span class="p">:</span><span class="n">Named</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">name</span> <span class="o">//</span> <span class="k">return</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="n">desp</span> <span class="o">//</span> <span class="k">return</span> <span class="n">nil</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="扩展">扩展</h3>

<p>扩展可以向已有类型添加新功能。可以添加属性、方法、构造器、下标、嵌套类型、实现新接口。
添加扩展后，新功能对已有类型的所有实例都是可用的，包括在这个扩展前定义的。
但是，￼扩展可以添加新的计算属性，不可以添加存储属性，也不可以向已有属性添加属性观测器(property observers)。
扩展的语法如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">extension</span> <span class="n">SomeType</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">new</span> <span class="n">functionality</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="n">SomeType</span><span class="p">:</span> <span class="n">SomeProtocol</span><span class="p">,</span> <span class="n">AnotherProctocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="n">new</span> <span class="n">protocol</span> <span class="n">implementation</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>扩展Double的例子
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">extension</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">km</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">self</span> <span class="o"><em></span> <span class="mi">1</span><span class="n"><em>000</span><span class="o">.</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">m</span> <span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">self</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">cm</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">self</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">mm</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">self</span> <span class="o">/</span> <span class="mi">1</span><span class="n"></em>000</span><span class="o">.</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">ft</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="bp">self</span> <span class="o">/</span> <span class="mf">3.28084</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">//</span> <span class="err">添加修改实例本身的方法需要标注为</span><span class="n">mutating</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">square</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span> <span class="o">=</span> <span class="bp">self</span> <span class="o"></em></span> <span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">oneInch</span> <span class="o">=</span> <span class="mf">25.4</span><span class="o">.</span><span class="n">mm</span>
</span><span class='line'><span class="n">let</span> <span class="n">threeFeet</span> <span class="o">=</span> <span class="mf">3.</span><span class="n">ft</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以使用extension让任何现有的类型实现新的protocol，例如让Double类型实现Speak接口。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">extension</span> <span class="n">Double</span><span class="p">:</span><span class="n">Speak</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">des</span> <span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Double value&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">say</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;(self.des): (self)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">//</span> <span class="n">usage</span>
</span><span class='line'><span class="mf">3.2</span><span class="o">.</span><span class="n">say</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="答案">答案</h2>

<p><a name="answer">答案</a>是会打印出 1 5 6 。可以copy到playground里试试看 ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift资源汇总]]></title>
    <link href="http://erikge.com/articles/SwiftResSummary"/>
    <updated>2014-06-20T15:54:19+08:00</updated>
    <id>http://erikge.com/articles/SwiftResSummary</id>
    <content type="html"><![CDATA[<p>最近iOS的开发世界里最热的应该就是Swift了。Swift让大家再次站在了同一起跑线上，而且是那么酷的脚本语言的语法。<br>
经过这不到一个月的时间，Swift的相关教程、资源、论坛蓬勃而出。就像美剧养肥了再看一样，汇总一些养肥的资源。</p>

<!--more-->

<h2 id="教程">教程</h2>

<ul>
<li><a href="http://kc.cc/VWs5">The Swift Programming Language中文完整版（CocoaChina精校）</a></li>
<li><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/">github上的翻译项目，网友力量的再一次体现</a>，离线<a href="https://www.gitbook.io/download/pdf/book/numbbbbb/-the-swift-programming-language-?lang=">pdf版</a></li>
</ul>

<h2 id="热闹的论坛">热闹的论坛</h2>

<ul>
<li><a href="http://swiftist.org/">http://swiftist.org/</a></li>
<li><a href="http://www.cocoachina.com/bbs/thread.php?fid=57">CocoaChina交流区</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doubango Getting Started]]></title>
    <link href="http://erikge.com/articles/DoubangoGettingStarted"/>
    <updated>2014-05-22T21:11:29+08:00</updated>
    <id>http://erikge.com/articles/DoubangoGettingStarted</id>
    <content type="html"><![CDATA[<!--more-->

<p>获取源码</p>

<p>Doubango基础代码：
* <a href="http://doubango.org/">官网</a>
* <a href="https://code.google.com/p/doubango/">google code</a>
* code: <code>svn checkout http://doubango.googlecode.com/svn/ doubango-read-only</code>
* 帮助: <a href="http://www.doubango.org/gettingstarted.html">http://www.doubango.org/gettingstarted.html</a></p>

<hr>

<p>Server side</p>

<p>webrtc2sip 
* <a href="http://www.webrtc2sip.org/">官网</a>
* <a href="https://code.google.com/p/webrtc2sip/">google code</a>
* code: <code>svn checkout http://webrtc2sip.googlecode.com/svn/trunk/ webrtc2sip-read-only</code></p>

<p>telepresence
* <a href="https://code.google.com/p/telepresence/">google code</a>
* code: <code>svn checkout http://telepresence.googlecode.com/svn/trunk/ telepresence-read-only</code></p>

<hr>

<p>Client-side components</p>

<p>sipML5<br>
* <a href="https://code.google.com/p/sipml5/">google code</a>
* code: <code>svn checkout http://sipml5.googlecode.com/svn/trunk/ sipml5-read-only</code></p>

<p>click2dial
* <a href="http://click2dial.org/index.html">官网</a>
* <a href="https://code.google.com/p/click-2-dial/">google code</a>
* code: <code>svn checkout http://click-2-dial.googlecode.com/svn/trunk/ click-2-dial-read-only</code></p>

<p>webrtc4all
* <a href="https://code.google.com/p/webrtc4all/">google code</a>
* code: <code>svn checkout http://webrtc4all.googlecode.com/svn/trunk/ webrtc4all-read-only</code></p>

<p>Boghe
* <a href="https://code.google.com/p/boghe/">google code</a>
* code: <code>svn checkout http://boghe.googlecode.com/svn/ boghe-read-only</code></p>

<p>iDoubs
* <a href="https://code.google.com/p/idoubs/">google code</a>
* code: <code>svn checkout http://idoubs.googlecode.com/svn/ idoubs-read-only</code></p>

<p>IMSDroid
* <a href="https://code.google.com/p/imsdroid/">google code</a>
* code: <code>svn checkout http://imsdroid.googlecode.com/svn/branches/2.0/ imsdroid-read-only</code></p>

<p>libSigComp
* <a href="https://code.google.com/p/libsigcomp/">google code</a>
* code: <code>svn checkout http://libsigcomp.googlecode.com/svn/trunk/ libsigcomp-read-only</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webrtc Getting Started]]></title>
    <link href="http://erikge.com/articles/HelloWebrtc"/>
    <updated>2014-05-17T13:44:24+08:00</updated>
    <id>http://erikge.com/articles/HelloWebrtc</id>
    <content type="html"><![CDATA[<p>开始搭建个可以看代码的环境。</p>

<!--more-->

<h2 id="获取代码">获取代码</h2>

<p>官方推荐步骤：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone <a href="https://chromium.googlesource.com/chromium/tools/depot_tools.git">https://chromium.googlesource.com/chromium/tools/depot_tools.git</a>
</span><span class='line'><span class="c">## Add depot_tools to your PATH</span>
</span><span class='line'><span class="nv">$ </span>gclient config <a href="http://webrtc.googlecode.com/svn/trunk">http://webrtc.googlecode.com/svn/trunk</a>
</span><span class='line'><span class="nv">$ </span>gclient sync --force
</span></code></pre></td></tr></table></div></figure></p>

<p><code>gclient sync</code>需要下载太多第三方库，很容易失败，搞了很多次都没成功。其实也没有必要都拉全，只获取webrtc自身的代码就可以。用git维护方便看代码时修改，可以只获取最近的代码
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>svn info <a href="http://webrtc.googlecode.com/svn/">http://webrtc.googlecode.com/svn/</a>
</span><span class='line'>git svn clone -s --prefix<span class="o">=</span>svn/ -r <span class="o">[</span>latest-10-version<span class="o">]</span>:HEAD <a href="http://webrtc.googlecode.com/svn/">http://webrtc.googlecode.com/svn/</a>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="构建过程">构建过程</h2>

<p>官方推荐的构建过程，默认生成对应PC平台的工程文件
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gclient runhooks --force
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>trunk
</span><span class='line'><span class="c">## Debug:</span>
</span><span class='line'><span class="nv">$ </span>ninja -C out/Debug
</span><span class='line'><span class="c">## Release:</span>
</span><span class='line'><span class="nv">$ </span>ninja -C out/Release
</span></code></pre></td></tr></table></div></figure></p>

<p>可以控制生成不同平台的工程文件，以Android为例
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;target_os = [&#39;android&#39;, &#39;unix&#39;]&quot;</span> &gt;&gt; .gclient
</span><span class='line'><span class="nv">$ </span>gclient sync --nohooks
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>trunk
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ./build/android/envsetup.sh
</span><span class='line'><span class="nv">$ GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;$GYP_DEFINES OS=android&quot;</span>
</span><span class='line'><span class="nv">$ JAVA_HOME</span><span class="o">=</span>&lt;location of Java SE 6 - JDK&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>也可以通过修改GYP_GENERATORS，生成Ninja以外的工程文件</p>

<ul>
<li>make for Makefiles</li>
<li>msvs for Visual Studio</li>
<li>msvs-ninja for Visual Studio project building with ninja</li>
<li>xcode for Xcode</li>
</ul>

<h2 id="在ios上运行的步骤">在iOS上运行的步骤</h2>

<p>感谢<a href="http://ninjanetic.com/how-to-get-started-with-webrtc-and-ios-without-wasting-10-hours-of-your-life/">这篇文章</a>，确实节省了我们宝贵的生命。总结主要的步骤如下。</p>

<h3 id="模拟器">模拟器</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>touch makeall-iossim.sh
</span><span class='line'>chmod +x makeall-iossim.sh
</span></code></pre></td></tr></table></div></figure>

<p>makeall-iossim.sh脚本的内容为
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span>fetch<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- fetching webrtc&quot;</span>
</span><span class='line'>gclient config <a href="http://webrtc.googlecode.com/svn/trunk/">http://webrtc.googlecode.com/svn/trunk/</a>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;target_os = [&#39;mac&#39;]&quot;</span> &gt;&gt; .gclient
</span><span class='line'>gclient sync
</span><span class='line'>
</span><span class='line'>sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;$d&#39;</span> .gclient
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;target_os = [&#39;ios&#39;, &#39;mac&#39;]&quot;</span> &gt;&gt; .gclient
</span><span class='line'>gclient sync
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- webrtc has been sucessfully fetched&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrbase<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;build_with_libjingle=1 build_with_chromium=0 libjingle_objc=1&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATORS</span><span class="o">=</span><span class="s2">&quot;ninja&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrsim<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>wrbase
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;$GYP_DEFINES OS=ios target_arch=ia32&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATOR_FLAGS</span><span class="o">=</span><span class="s2">&quot;$GYP_GENERATOR_FLAGS output_dir=out_sim&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_CROSSCOMPILE</span><span class="o">=</span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrmac<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>wrbase
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;$GYP_DEFINES OS=mac target_arch=x64&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATOR_FLAGS</span><span class="o">=</span><span class="s2">&quot;$GYP_GENERATOR_FLAGS output_dir=out_mac&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>build<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- building webrtc&quot;</span>
</span><span class='line'><span class="nb">pushd </span>trunk
</span><span class='line'>gclient runhooks
</span><span class='line'>ninja -C out_sim/Debug iossim AppRTCDemo
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- webrtc has been sucessfully built&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>run<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- running webrtc appdemo&quot;</span>
</span><span class='line'><span class="nb">pushd </span>trunk
</span><span class='line'>./out_sim/Debug/iossim out_sim/Debug/AppRTCDemo.app
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>fail<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;*** webrtc build failed&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>fetch <span class="o">||</span> fail
</span><span class='line'>wrsim <span class="o">||</span> fail
</span><span class='line'>build <span class="o">||</span> fail
</span><span class='line'>run <span class="o">||</span> fail
</span></code></pre></td></tr></table></div></figure>
然后执行该脚本就可以编译、运行。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./makeall-iossim.sh
</span></code></pre></td></tr></table></div></figure>
接下来如何玩呢？正常情况下，iOS的模拟器已经自动弹出，并启动了测试程序，然后可以按以下步骤体验下视频通话：
1. 打开PC或者android上的Chrome浏览器
2. 访问<a href="http://apprtc.appspot.com%E3%80%82%E5%8F%AF%E6%83%9C%E8%A2%AB%E5%A2%99%E4%BA%86%EF%BC%8C%E6%83%B3%E5%8A%9E%E6%B3%95%E7%BF%BB%E5%A2%99%E5%90%A7%EF%BC%8Csign%E3%80%82%E3%80%82%E3%80%82">http://apprtc.appspot.com。可惜被墙了，想办法翻墙吧，sign。。。</a>
3. 浏览器里的地址发生变化时，获得房间号成功。这时URL类似<a href="http://apprtc.appspot.com?r=34576398%EF%BC%8C%E8%BF%99%E9%87%8C34576398%E4%B8%BA%E6%88%BF%E9%97%B4%E5%8F%B7">http://apprtc.appspot.com?r=34576398，这里34576398为房间号</a>
4. 在iOS模拟器上运行的测试程序中，输入上一步获得的房间号（34576398），便可以体验了</p>

<h3 id="真机">真机</h3>

<p>将生成的app安装到真机上时，需要用到<a href="https://github.com/libimobiledevice/ideviceinstaller">ideviceinstaller</a>。可以通过<a href="http://brew.sh/">HomeBrew</a>安装。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install ideviceinstaller --HEAD
</span></code></pre></td></tr></table></div></figure>
其他的和模拟器类似：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>touch makeall-iosdevice.sh
</span><span class='line'>chmod +x makeall-iosdevice.sh
</span></code></pre></td></tr></table></div></figure>
makeall-iosdevice.sh脚本的内容为
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span>fetch<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- fetching webrtc&quot;</span>
</span><span class='line'>gclient config <a href="http://webrtc.googlecode.com/svn/trunk/">http://webrtc.googlecode.com/svn/trunk/</a>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;target_os = [&#39;mac&#39;]&quot;</span> &gt;&gt; .gclient
</span><span class='line'>gclient sync
</span><span class='line'>
</span><span class='line'>sed -i <span class="s2">&quot;&quot;</span> <span class="s1">&#39;$d&#39;</span> .gclient
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;target_os = [&#39;ios&#39;, &#39;mac&#39;]&quot;</span> &gt;&gt; .gclient
</span><span class='line'>gclient sync
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- webrtc has been sucessfully fetched&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrbase<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;build_with_libjinglth_chromium=0 libjingle_objc=1&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATORS</span><span class="o">=</span><span class="s2">&quot;ninja&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrios<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>wrbase
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;$GYP_DEFINES OS=ios target_arch=armv7&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATOR_FLAGS</span><span class="o">=</span><span class="s2">&quot;$GYP_GENERATOR_FLAGS output_dir=out_ios&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_CROSSCOMPILE</span><span class="o">=</span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>wrmac<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>wrbase
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="s2">&quot;$GYP_DEFINES OS=mac target_arch=x64&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GYP_GENERATOR_FLAGS</span><span class="o">=</span><span class="s2">&quot;$GYP_GENERATOR_FLAGS output_dir=out_mac&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>buildios<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- building webrtc ios&quot;</span>
</span><span class='line'><span class="nb">pushd </span>trunk
</span><span class='line'>wrios <span class="o">&amp;&amp;</span> gclient runhooks <span class="o">&amp;&amp;</span> ninja -C out_ios/Debug-iphoneos AppRTCDemo
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- webrtc has been sucessfully built&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>launch<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- launching on device&quot;</span>
</span><span class='line'>ideviceinstaller -i trunk/out_ios/Debug-iphoneos/AppRTCDemo.app
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;-- launch complete&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>fail<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;*** webrtc build failed&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#fetch || fail</span>
</span><span class='line'>wrios <span class="o">||</span> fail
</span><span class='line'>buildios <span class="o">||</span> fail
</span><span class='line'>launch <span class="o">||</span> fail
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="可能会遇到的问题">可能会遇到的问题</h3>

<h4 id="codesigning">Codesigning</h4>

<p>签名时，webrtc脚本（gyp）会查找本机钥匙串，寻找和“iPhone developer”相符的证书。如果没有证书或者有多个证书都会出现异常。
如果没有证书，需要向Apple申请一个。
当有多个证书时，可以通过<code>security find-identity</code>查看所有匹配的证书，然后选择一个合适的，在trunk/build/common.gypi的‘CODE_SIGN_IDENTITY’中修改。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># iOS SDK wants everything for device signed</span>
</span><span class='line'>‘CODE_SIGN_IDENTITY<span class="o">[</span><span class="nv">sdk</span><span class="o">=</span>iphoneos*<span class="o">]</span>‘: ‘iPhone Developer’ <span class="c"># 修改前</span>
</span><span class='line'>‘CODE_SIGN_IDENTITY<span class="o">[</span><span class="nv">sdk</span><span class="o">=</span>iphoneos*<span class="o">]</span>‘: ‘iPhone Developer: Jason Adams <span class="o">(</span>SZ2V5SDF5DF<span class="o">)</span>’ <span class="c"># 修改后</span>
</span></code></pre></td></tr></table></div></figure>
测试工程的默认bound ID是com.google.AppRTCDemo，可以通过修改trunk/talk/examples/objc/AppRTCDemo/ios/Info.plist文件，改成正确的。<br>
如果还有错误，可以看看证书和provisioning profile文件是否匹配。</p>

<h2 id="todo">TODO</h2>

<p>AppRTCDemo test project - trunk/talk/examples/objc</p>

<p>This is the demo application with the high level communication logic and UI</p>

<p>Objective-C WebRTC libraries – trunk/talk/app/webrtc/objc</p>

<p>These are the Objective-C wrappers to the core communication libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello GYP]]></title>
    <link href="http://erikge.com/articles/HelloGyp"/>
    <updated>2014-05-17T13:43:55+08:00</updated>
    <id>http://erikge.com/articles/HelloGyp</id>
    <content type="html"><![CDATA[<p>GYP，<a href="https://code.google.com/p/gyp/">Generate Your Projects</a>，一个google开源的构建系统，最开始用于Chromium项目，现在一些其他的开源项目也开始使用GYP，如<a href="https://code.google.com/p/v8/">V8</a>和<a href="https://github.com/TooTallNate/node-gyp">node-gyp</a>。本文是学习使用GYP的笔记，算是一个GYP的简明教程吧。</p>

<!--more-->

<h2 id="特别之处">特别之处</h2>

<p>在已经有很多的构建系统的情况下，gyp诞生的哲学或者说优点如下：</p>

<ol>
<li>各平台使用各自主流的构建系统。

<ul>
<li>程序员更熟悉自己的平台，减少学习成本。</li>
<li>构建速度快。自己平台的主流构建系统的速度是各平台优化过的。</li>
</ul></li>
<li>在一个平台上可以生成所有支持的平台的工程文件。

<ul>
<li>如在mac上也可以生成Visual Studio工程，windows上也可以生成Xcode工程。</li>
</ul></li>
<li>生成的工程文件和手工创建的工程文件没有区别

<ul>
<li>这样，随时可以停止使用gyp。别人可以只使用相关工程文件而不使用gyp</li>
</ul></li>
</ol>

<h2 id="安装">安装</h2>

<p>前提条件：本机需要安装python和svn。</p>

<p>下载：<code>svn checkout http://gyp.googlecode.com/svn/trunk/ &lt;gyp-dir&gt;</code>
<br>或者通过git仓库：<a href="http://git.chromium.org/external/gyp.git">http://git.chromium.org/external/gyp.git</a></p>

<p>有两种安装方式。第一种安装方法如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> &lt;gyp-dir&gt; <span class="c"># 刚才的下载目录</span>
</span><span class='line'><span class="o">[</span>sudo<span class="o">]</span> python setup.py install
</span></code></pre></td></tr></table></div></figure>
这个命令做的事情主要是安装python的第三方扩展到/Library/Python/2.7/site-packages/gyp-0.1-py2.7.egg，并把gyp的可执行文件copy到/usr/local/bin。</p>

<p>第二种安装方式是直接将&lt;gyp-dir&gt;加入PATH。</p>

<h2 id="使用">使用</h2>

<ol>
<li>编写.gyp文件</li>
<li>运行gyp命令生成makefile、build.ninja文件或xcode、vs等工程

<ul>
<li><code>gyp --depth=. main.gyp</code></li>
<li><code>gyp --depth=. --generator-output=build -f ninja main.gyp</code>

<ul>
<li>&ndash;depth指定工程的根目录</li>
<li>&ndash;generator-output指定工程文件的输出目录，默认为当前目录</li>
<li>-f指定生成工程文件的类型，常用的有&#39;make&#39;, &lsquo;ninja&rsquo;, &lsquo;xcode&rsquo;, &lsquo;msvs&rsquo;, &lsquo;scons&rsquo;</li>
</ul></li>
<li><code>gyp -h</code>显示命令行帮助信息</li>
</ul></li>
<li>编译。根据第2步的结果，运行make、ninja或者在xcode、vs里编译</li>
</ol>

<p>举一个最简单的例子，源文件如下：
<figure class='code'><figcaption><span>main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello World!&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
编写.gyp文件如下：
<figure class='code'><figcaption><span>main.gyp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&#39;targets&#39;:</span> <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">&#39;target_name&#39;:</span> <span class="err">&#39;main&#39;,</span>
</span><span class='line'>      <span class="err">&#39;type&#39;:</span> <span class="err">&#39;executable&#39;,</span>
</span><span class='line'>      <span class="err">&#39;sources&#39;:</span> <span class="err">[</span>
</span><span class='line'>        <span class="err">&#39;main.cpp&#39;,</span>
</span><span class='line'>      <span class="err">],</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="err">],</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在源文件目录下运行命令<code>gyp --depth=. main.gyp</code>，生成工程文件。打开生成的工程文件编译、运行即可。</p>

<p>更多例子可以参考<a href="https://github.com/examplecode/gypdemo">gypdemo</a></p>

<h2 id="语法">语法</h2>

<p>GYP的输入文件习惯上后缀为.gyp或.gypi。.gypi文件作为.gyp文件的include文件。
以Visual Studio为例，.gyp文件对应.sln工作空间，.gyp文件中的target对应.vcproj或.vxcproj工程。</p>

<p><em>.gyp文件的顶级元素为&#39;variables&#39;, &lsquo;includes&rsquo;, &lsquo;target_defaults&rsquo;, &lsquo;targets&rsquo;, &lsquo;conditions&#39;。语法是JSON，或者说是允许trailing comments的python。</em>.gyp文件之间其实可以不用相互引用，gyp会递归的扫描当前目录的所有子目录，处理扫描到的所有*.gyp文件。</p>

<h3 id="官方文档">官方文档</h3>

<ul>
<li>模版和例子：<a href="https://code.google.com/p/gyp/wiki/GypUserDocumentation">GypUserDocumentation</a></li>
<li>主要元素或者配置项：<a href="https://code.google.com/p/gyp/wiki/GypLanguageSpecification">GypLanguageSpecification</a></li>
<li>基本语法：<a href="https://code.google.com/p/gyp/wiki/InputFormatReference">InputFormatReference</a></li>
</ul>

<h3 id="变量">变量</h3>

<p>变量分为三类，Predefined、User-defined、Automatic。<br>
变量设置默认值的方法：<code>name%:value</code>。只有name未定义时，才将name的值设置为value.</p>

<ul>
<li>Predefined，命名习惯为CAPITAL_LETTERS。

<ol>
<li>OS：用于判断操作系统</li>
<li>EXECUTABLE_PREFIX：可执行文件的前缀</li>
<li>EXECUTABLE_SUFFIX：可执行文件的后缀</li>
<li>INTERMEDIATE_DIR：中间文件目录，只对单一target有效</li>
<li>SHARED_INTERMEDIATE_DIR：中间文件共享目录，所有target（包括跨.gyp文件的target）共用同一目录</li>
<li>PRODUCT_DIR：输出文件（编译出的可执行文件、库等）的主目录</li>
</ol></li>
<li>User-defined，命名习惯为lowercase_letters。变量使用的方式如下

<ol>
<li><code>&lt;(VAR)</code> early phase, value is string</li>
<li><code>&gt;(VAR)</code> post phase, value is string</li>
<li><code>&lt;@(VAR)</code> early phase, value is list</li>
<li><code>&gt;@(VAR)</code> post phase, value is list</li>
</ol></li>
<li>Automatic，dictionary中，name:string的key/value对会自动生成一个_name的变量，值为string</li>
</ul>

<h3 id="命令">命令</h3>

<p>gyp可以执行shell命令，即将命令内容传递给shell执行，然后获得返回值。<br>
用法为<code>&lt;!(cmd)</code>或<code>&lt;!@(cmd)</code>，前者返回值为string，后者返回值为list。</p>

<p>这样，虽然gyp没有提供通配符，但是可以通过命令实现这个功能，如实现添加当前目录下所有.cpp后缀的文件作为sources：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&#39;sources&#39;:</span> <span class="p">[</span>
</span><span class='line'>    <span class="err">&#39;&lt;!@(ls</span> <span class="mi">-1</span> <span class="err">./*.cpp)&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="target的配置项目">target的配置项目</h3>

<p>顶级元素下的target_defaults中可以设置所有targets共用的配置项目，targets中可以具体配置每个target。<br>
常用的target可分为可运行程序、静态库、动态库等，但在跨平台时，不同平台的target各不相同，参数的设置也相差很远。
target的通用框架如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">&#39;targets&#39;:</span> <span class="err">[{</span>
</span><span class='line'>        <span class="err">&#39;target_name&#39;:</span> <span class="err">&#39;target_one&#39;,</span>
</span><span class='line'>        <span class="err">&#39;type&#39;:</span> <span class="err">&#39;executable&#39;,</span>
</span><span class='line'>        <span class="err">&#39;dependencies&#39;:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&#39;xyzzy&#39;,</span>
</span><span class='line'>            <span class="err">&#39;../bar/bar.gyp:bar&#39;,</span>
</span><span class='line'>        <span class="err">],</span>
</span><span class='line'>        <span class="err">&#39;defines&#39;:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&#39;DEFINE_FOO&#39;,</span>
</span><span class='line'>            <span class="err">&#39;DEFINE_A_VALUE=value&#39;,</span>
</span><span class='line'>        <span class="err">],</span>
</span><span class='line'>        <span class="err">&#39;include_dirs&#39;:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&#39;..&#39;,</span>
</span><span class='line'>        <span class="err">],</span>
</span><span class='line'>        <span class="err">&#39;sources&#39;:</span> <span class="err">[</span>
</span><span class='line'>            <span class="err">&#39;file1.cc&#39;,</span>
</span><span class='line'>            <span class="err">&#39;file2.cc&#39;,</span>
</span><span class='line'>        <span class="err">],</span>
</span><span class='line'>        <span class="err">&#39;conditions&#39;:</span> <span class="err">[</span>
</span><span class='line'>          <span class="err">[&#39;OS==</span><span class="nt">&quot;linux&quot;</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">{</span><span class="p">}</span><span class="err">],</span>
</span><span class='line'>          <span class="p">[</span><span class="err">&#39;OS==</span><span class="s2">&quot;win&quot;</span><span class="err">&#39;</span><span class="p">,</span> <span class="p">{}]</span>
</span><span class='line'>        <span class="err">],</span>
</span><span class='line'>    <span class="err">},],</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>
target的一些常用配置，各个平台都差不多，gyp提供了统一的设置方法。<br>
defines为宏定义，对应-D或/D；<br>
include_dirs对应-I或/I；<br>
cflags为编译选项，对应类似-Werror或/Werror；<br>
ldflags为链接选项，对应类似-pthread；<br></p>

<p>target还有一些在类型不同、平台不同时，差别很大的配置，列举一些如下：</p>

<ul>
<li>静态库或动态库</li>
</ul>

<p><code>direct_dependent_settings</code>：定义一些编译参数、宏定义等，这些定义将导出到直接依赖该库（通常是第三方库）的target<br>
<code>all_dependent_settings</code>：定义一些编译参数、宏定义等，这些定义将导出到所有依赖该库的target，包含直接依赖和间接依赖<br>
<code>link_settings</code>：定义一些当将该库作为输入时需要配置的链接参数。通常是对静态库有效，动态库忽略<br>
<code>export_dependent_settings</code>：列出一些dependencies中的target，direct_dependent_settings定义的配置将应用到export_dependent_settings列出的target。即将依赖该库的配置导出到该库依赖的target<br></p>

<ul>
<li>跨平台工程</li>
</ul>

<p>针对各个平台不同的配置，gyp的策略是直接使用各平台工程的原生参数。如生成Xcode工程时，可以直接在gyp文件中使用SDKROOT，TARGETED_DEVICE_FAMILY等Xcode中使用的参数。</p>

<p>在xcode_settings对象中设置Xcode的特有参数<br>
在msvs_settings对象中设置Visual Studio的特有参数。</p>

<p>这种策略有一个便利之处。以Xcode工程为例，如果有不知道怎么设置的选项，可以先在Xcode工程中设置好，再从工程文件.xcodeproj包内的project.pbxproj文件中拷贝出来，同步到.gyp文件中。</p>

<h3 id="gyp的潜规则">gyp的潜规则</h3>

<ol>
<li>target的sources项会按照对应平台自动过滤后缀（*_linux.{ext}, *_mac.{ext}, *_posix.{ext} or *_win.{ext}）不符合的源文件。</li>
</ol>

<h2 id="issues">Issues</h2>

<h3 id="设置visual-studio的版本">设置Visual Studio的版本</h3>

<p>如指定为vs2008</p>

<ol>
<li>环境变量: <code>GYP_MSVS_VERSION=2008</code></li>
<li>命令行参数: <code>-G msvs_version=2008</code></li>
</ol>

<h3 id="参数定义">参数定义</h3>

<p>定义各种编译参数、各种宏</p>

<ol>
<li>环境变量: <code>GYP_DEFINES=windows_sdk_path=&quot;path to sdk&quot;</code></li>
<li>命令行参数: <code>-D XXX -D YYY=ZZZ</code></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello CMake]]></title>
    <link href="http://erikge.com/articles/HelloCMake"/>
    <updated>2014-05-15T14:06:09+08:00</updated>
    <id>http://erikge.com/articles/HelloCMake</id>
    <content type="html"><![CDATA[<p>CMake简明语法参考。</p>

<!--more-->

<h2 id="安装">安装</h2>

<p>可以下载<a href="http://www.cmake.org/cmake/resources/software.html">对应平台编译好的版本</a>直接安装，也可以<a href="http://www.cmake.org/cmake/help/install.html">从源码自己编译</a>。</p>

<h2 id="使用">使用</h2>

<ol>
<li>编写CMakeLists.txt文件</li>
<li>运行CMake生成makefile、build.ninja文件或xcode、vs等工程。可以使用图形界面，也可以使用命令行

<ul>
<li>cmake -DVARIABLE:TYPE=VALUE</li>
<li>cmake [options] <path-to-source></li>
<li>cmake -h for more information</li>
</ul></li>
<li>编译。根据第2步的结果，运行make、ninja或者在xcode、vs里编译</li>
</ol>

<p>CMake的文档很详细，在线文档参考<a href="http://www.cmake.org/cmake/help/v2.8.12/cmake.html">这里</a>。好玩的是，CMake可以本地生成一份和在线文档一模一样的文档。运行<code>cmake --help-html &gt; doc.html</code>即可。</p>

<h2 id="cmakelists.txt使用场景">CMakeLists.txt使用场景</h2>

<p>列出一些case by case的简单模版，作为参考。</p>

<p>最小的CMakeLists.txt
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">cmake_minimum_required</span> <span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8.9</span><span class="p">)</span>
</span><span class='line'><span class="nb">project</span> <span class="p">(</span><span class="s">Tutorial</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_executable</span><span class="p">(</span><span class="s">Tutorial</span> <span class="s">tutorial.cxx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">2.8</span><span class="p">)</span>
</span><span class='line'><span class="nb">project</span> <span class="p">(</span><span class="s">hello</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">add_library</span><span class="p">(</span><span class="s">hello</span> <span class="s">*.cpp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">add_executable</span><span class="p">(</span><span class="s">dist.exe</span> <span class="s">main.cpp</span><span class="p">)</span>
</span><span class='line'><span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">dist.exe</span> <span class="s">hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># The name of our project is &quot;HELLO&quot;. CMakeLists files in this project can </span>
</span><span class='line'><span class="c"># refer to the root source directory of the project as ${HELLO_SOURCE_DIR} and </span>
</span><span class='line'><span class="c"># to the root binary directory of the project as ${HELLO_BINARY_DIR}. </span>
</span><span class='line'><span class="nb">cmake_minimum_required</span> <span class="p">(</span><span class="s">VERSION</span> <span class="s">2.6</span><span class="p">)</span>
</span><span class='line'><span class="nb">project</span> <span class="p">(</span><span class="s">HELLO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Recurse into the &quot;Hello&quot; and &quot;Demo&quot; subdirectories. This does not actually </span>
</span><span class='line'><span class="c"># cause another cmake executable to run. The same process will walk through </span>
</span><span class='line'><span class="c"># the project&#39;s entire directory structure. </span>
</span><span class='line'><span class="nb">add_subdirectory</span> <span class="p">(</span><span class="s">Hello</span><span class="p">)</span>
</span><span class='line'><span class="nb">add_subdirectory</span> <span class="p">(</span><span class="s">Demo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># Create a library called &quot;Hello&quot; which includes the source file &quot;hello.cxx&quot;. </span>
</span><span class='line'><span class="c"># The extension is already found. Any number of sources could be listed here. </span>
</span><span class='line'><span class="nb">add_library</span> <span class="p">(</span><span class="s">Hello</span> <span class="s">hello.cxx</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># Make sure the compiler can find include files from our Hello library. </span>
</span><span class='line'><span class="nb">include_directories</span> <span class="p">(</span><span class="o">${</span><span class="nv">HELLO_SOURCE_DIR</span><span class="o">}</span><span class="s">/Hello</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the linker can find the Hello library once it is built. </span>
</span><span class='line'><span class="nb">link_directories</span> <span class="p">(</span><span class="o">${</span><span class="nv">HELLO_BINARY_DIR</span><span class="o">}</span><span class="s">/Hello</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add executable called &quot;helloDemo&quot; that is built from the source files </span>
</span><span class='line'><span class="c"># &quot;demo.cxx&quot; and &quot;demo_b.cxx&quot;. The extensions are automatically found. </span>
</span><span class='line'><span class="nb">add_executable</span> <span class="p">(</span><span class="s">helloDemo</span> <span class="s">demo.cxx</span> <span class="s">demo_b.cxx</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Link the executable to the Hello library. </span>
</span><span class='line'><span class="nb">target_link_libraries</span> <span class="p">(</span><span class="s">helloDemo</span> <span class="s">Hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="cmakelists.txt常用语法">CMakeLists.txt常用语法</h2>

<p>官方语法说明在<a href="http://www.cmake.org/cmake/help/syntax.html">这里</a>。</p>

<ul>
<li>注释以#开头</li>
<li><p>命令，包括内置的命令和用户自定义的命令，命令的名字是大小写不敏感的。</p>

<p><code>command (args...)</code></p></li>
<li><p>空格（spaces, line feeds, tabs）作为分隔符，双引号包括的部分作为一个整体。</p></li>
<li><p>backslash作为escape characters</p></li>
</ul>

<p>list
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">VAR</span> <span class="s">a;b;c</span><span class="p">)</span>
</span><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">Foo</span> <span class="s">a</span> <span class="s">b</span> <span class="s">c</span><span class="p">)</span>
</span><span class='line'><span class="nb">command</span><span class="p">(</span><span class="o">${</span><span class="nv">Foo</span><span class="o">}</span><span class="p">)</span> <span class="c">#变量使用，等价于command(a b c)</span>
</span><span class='line'><span class="nb">command</span><span class="p">(</span><span class="s2">&quot;${Foo}&quot;</span><span class="p">)</span> <span class="c">#abc的list作为一个参数</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>macro and function, function available in 2.6 and greater
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># define a macro hello </span>
</span><span class='line'><span class="nb">macro</span><span class="p">(</span><span class="s">hello</span> <span class="s">MESSAGE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="o">${</span><span class="nv">MESSAGE</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">endmacro</span><span class="p">(</span><span class="s">hello</span><span class="p">)</span>
</span><span class='line'><span class="c"># call the macro with the string &quot;hello world&quot; </span>
</span><span class='line'><span class="nb">hello</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c"># define a function hello </span>
</span><span class='line'><span class="nb">function</span><span class="p">(</span><span class="s">hello</span> <span class="s">MESSAGE</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="o">${</span><span class="nv">MESSAGE</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">endfunction</span><span class="p">(</span><span class="s">hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Flow Control
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="c"># some_command will be called if the variable&#39;s value is not: </span>
</span><span class='line'><span class="c"># empty, 0, N, NO, OFF, FALSE, NOTFOUND, or -NOTFOUND. </span>
</span><span class='line'><span class="nb">if</span><span class="p">(</span><span class="s">var</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">some_command</span><span class="p">(</span><span class="s">...</span><span class="p">)</span>
</span><span class='line'><span class="nb">endif</span><span class="p">(</span><span class="s">var</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">while</span><span class="p">(</span><span class="s">condition</span><span class="p">)</span>
</span><span class='line'>    <span class="err">COMMAND1(ARGS</span> <span class="err">...)</span>
</span><span class='line'>    <span class="err">COMMAND2(ARGS</span> <span class="err">...)</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'><span class="nb">endwhile</span><span class="p">(</span><span class="s">condition</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cmake'><span class='line'><span class="nb">set</span><span class="p">(</span><span class="s">VAR</span> <span class="s">a</span> <span class="s">b</span> <span class="s">c</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># loop over a, b,c with the variable f </span>
</span><span class='line'><span class="nb">foreach</span><span class="p">(</span><span class="s">f</span> <span class="o">${</span><span class="nv">VAR</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">message</span><span class="p">(</span><span class="o">${</span><span class="nv">f</span><span class="o">}</span><span class="p">)</span>
</span><span class='line'><span class="nb">endforeach</span><span class="p">(</span><span class="s">f</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通配符
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^ Matches at beginning of a line or string
</span><span class='line'>$ Matches at end of a line or string
</span><span class='line'>. Matches any single character other than a newline
</span><span class='line'>[ ] Matches any character(s) inside the brackets
</span><span class='line'>[^ ] Matches any character(s) not inside the brackets
</span><span class='line'>[-] Matches any character in range on either side of a dash
</span><span class='line'>* Matches preceding pattern zero or more times
</span><span class='line'>+ Matches preceding pattern one or more times
</span><span class='line'>? Matches preceding pattern zero or once only
</span><span class='line'>() Saves a matched expression and uses it in a later replacement</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Ninja]]></title>
    <link href="http://erikge.com/articles/HelloNinja"/>
    <updated>2014-05-12T11:28:25+08:00</updated>
    <id>http://erikge.com/articles/HelloNinja</id>
    <content type="html"><![CDATA[<p>Ninja，中文“忍者”的意思。这里说到的Ninja是一个<a href="https://github.com/martine/ninja">专注于速度的构建系统</a>，正式的版本可以从<a href="https://github.com/martine/ninja/releases">这里</a>下载。写本文时的版本是1.4.0。</p>

<p>最初遇到Ninja是在编译Webrtc的时候，记得以前还是感觉乱乱的<a href="https://code.google.com/p/gyp/">gyp</a>，不知什么时候换成陌生的Ninja了。当时匆匆解决了编译问题，没仔细看Ninja的细节，后来在看aosabook的<a href="http://aosabook.org/en/intro1.html">《The Architecture of Open Source Applications》</a>、<a href="http://aosabook.org/en/posa/introduction.html">《The Performance of Open Source Applications》</a>系列的书时，又提到了Ninja，不由得想用用试试看了。</p>

<!-- more -->

<h2 id="特别之处">特别之处</h2>

<p>对比别的构建系统，Ninja的特点是快和简洁，仅保留最少的特性来提高编译速度。Ninja最初的想法源于martine在开发Chromium项目时对编译速度的<a href="http://neugierig.org/software/chromium/notes/2011/02/ninja.html">抱怨</a>。</p>

<p>简单来说，Ninja是一个很快的make替代品。ninja对应make，build.ninja对应makefile，CMake、gyp对应autoconf、automake。</p>

<p>更详细的feature可以参考Ninja的<a href="http://martine.github.io/ninja/manual.html#_introduction">文档</a>。</p>

<h2 id="使用">使用</h2>

<p>Ninja的设计理念并不包括提高可读性。所以直接写build.niinja文件会过于繁琐。实际使用过程中更推荐和CMake或gyp配合使用。</p>

<p>build.niinja文件示例如下，分为rule和dependency两部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># part rull</span>
</span><span class='line'><span class="nv">cc</span><span class="o">=</span>gcc
</span><span class='line'><span class="nv">cflags</span><span class="o">=</span> -g -c
</span><span class='line'>
</span><span class='line'><span class="err">rule</span> <span class="err">cc</span>
</span><span class='line'>     <span class="nv">command</span> <span class="o">=</span> <span class="nv">$cc</span> <span class="nv">$cflags</span> <span class="nv">$in</span> -o <span class="nv">$out</span>
</span><span class='line'>
</span><span class='line'><span class="err">rule</span> <span class="err">link</span>
</span><span class='line'>     <span class="nv">command</span> <span class="o">=</span> <span class="nv">$cc</span> <span class="nv">$in</span> -o <span class="nv">$out</span>
</span><span class='line'>
</span><span class='line'><span class="err">rule</span> <span class="err">cleanup</span>
</span><span class='line'>     <span class="nv">command</span> <span class="o">=</span> rm -rf *.exe *.o
</span><span class='line'>
</span><span class='line'><span class="c">#part dependency</span>
</span><span class='line'><span class="nf">build func.o           </span><span class="o">:</span> <span class="m">cc func.c</span>
</span><span class='line'><span class="nf">build main.o           </span><span class="o">:</span> <span class="m">cc main.c</span>
</span><span class='line'>
</span><span class='line'><span class="nf">build app.exe            </span><span class="o">:</span> <span class="m">link main.o func.o</span>
</span><span class='line'>
</span><span class='line'><span class="nf">build all</span><span class="o">:</span>  <span class="m">phony || app.exe</span>
</span><span class='line'><span class="nf">build clean</span><span class="o">:</span> <span class="m">cleanup</span>
</span></code></pre></td></tr></table></div></figure>

<p>ninja命令使用示例如下
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="c"># compile</span>
</span><span class='line'><span class="err">ninja</span>
</span><span class='line'><span class="c"># help</span>
</span><span class='line'><span class="err">ninja</span> <span class="err">-h</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="配合cmake使用">配合CMake使用</h3>

<p>CMake从2.8.9开始可以支持生成Ninja的build.ninja文件。CMake的简单用法参考<a href="http://erikge.com/articles/HelloCMake">这里</a>。</p>

<p>CMake生成build.ninja文件的方法如下
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cmake -G Ninja
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="配合gyp使用">配合GYP使用</h3>

<p>gyp，Generate Your Projects，一个google开源的构建系统。gyp的简单用法参考<a href="http://erikge.com/articles/HelloGyp">这里</a>。</p>

<p>gyp生成build.ninja文件的方法如下
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gyp ***.gyp -fninja
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="调试">调试</h2>

<p>我们希望使用ninja的编译速度，但是我们还希望能够在图形界面的IDE（如VS，Xcode）中debug、设置断点等。</p>

<h3 id="xcode">Xcode</h3>

<p>如果仅仅是需要抓crash，或者Attach到进程看性能</p>

<ul>
<li>打开任意Xcode工程</li>
<li>Debug &gt; Attach to Process &gt; {app-name}</li>
<li>如果触发crash，Xcode debugger会出现</li>
</ul>

<p>设置断点。必须要有程序对应的源码的Xcode工程，CMake、gyp都可以生成</p>

<ul>
<li>打开包含源码的Xcode工程</li>
<li>打开需要的文件，设置断点</li>
<li>手机，或Mac上启动程序</li>
<li>Xcode中 Debug &gt; Attach to Process &gt; {app-name}</li>
<li>切换到app，做一些操作触发断点</li>
</ul>

<p>如果断点不能触发，尝试在&ldquo;Debugging&quot;面板中关闭&quot;Load Symbols Lazily&quot;功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法说明]]></title>
    <link href="http://erikge.com/articles/markdownSyntax"/>
    <updated>2014-05-04T14:16:39+08:00</updated>
    <id>http://erikge.com/articles/markdownSyntax</id>
    <content type="html"><![CDATA[<p>Markdown简洁易用，非常适合整理文档。简单总结一下常用语法，可以作为cheatsheet。</p>

<!-- more -->

<h2 id="通用语法">通用语法</h2>

<p>Markdown详细语法参考<a href="http://daringfireball.net/projects/markdown/syntax">这里</a>，中文参考<a href="http://wowubuntu.com/markdown/index.html">这里</a>。</p>

<h3 id="代码">代码</h3>
<div class="highlight"><pre><code class="text">Use the `printf()` function.
这是一个普通段落：

    这是一个代码区块。
</code></pre></div>
<h3 id="链接">链接</h3>
<div class="highlight"><pre><code class="text">&lt;http://erikge.com/&gt; &lt;erikge@qq.com&gt;

[直接跟着链接](http://erikge.com/)

[参考式链接][link_id]
[link_id]: http://erikge.com/  &quot;Optional Title Here&quot;

[隐式链接][]
[隐式链接]: http://erikge.com/        &quot;my blog&quot;
</code></pre></div>
<h3 id="图片">图片</h3>

<p>Markdown 还没有办法指定图片的宽高，如果需要，可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<div class="highlight"><pre><code class="text">![Alt text](/images/email.png &quot;Optional title&quot;)
![Alt text][id]
[id]: /images/search.png  &quot;Optional title attribute&quot;
</code></pre></div>
<h3 id="强调">强调</h3>
<div class="highlight"><pre><code class="text">*italic*   **bold**
_italic_   __bold__
</code></pre></div>
<h3 id="标题">标题</h3>
<div class="highlight"><pre><code class="text">This is an H1
=============

This is an H2
-------------
# 这是 H1

## 这是 H2

###### 这是 H6
</code></pre></div>
<h3 id="列表">列表</h3>

<p>* + - 都可以作为列表开始标记。新段落第一行缩进一个tab或4个空格可以嵌入列表。</p>
<div class="highlight"><pre><code class="text">-   Red
-   Green
-   Blue

1.  Bird
2.  McHale
1.  Parish

1.  A list item.

    With multiple paragraphs.
1.  Bar
</code></pre></div>
<h3 id="引用">引用</h3>

<p>引用内可以嵌套别的格式。</p>
<div class="highlight"><pre><code class="text">&gt; Email-style angle brackets
&gt; are used for blockquotes.

&gt; &gt; And, they can be nested.

&gt; #### Headers in blockquotes
&gt; 
&gt; * You can quote a list.
&gt; * Etc.
</code></pre></div>
<h3 id="分割线">分割线</h3>

<p>三个以上的* - _可以作为分隔符。</p>
<div class="highlight"><pre><code class="text">***
---
___
</code></pre></div>
<h3 id="特殊符号">特殊符号</h3>

<p>反斜杠用来插入特殊符号。可用的特殊符号如下</p>
<div class="highlight"><pre><code class="text">\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre></div>
<h2 id="扩展语法">扩展语法</h2>

<p>通用的语法适用范围广，但是总有一些效果是我们特别想有，但是通用Markdown太简洁而缺少的，比如 <strong>表格</strong>。</p>

<h3 id="表格">表格</h3>

<p>markdown渲染引擎有很多，如maruku、rdiscount、redcarpet、BlueCloth等。尝试对比了各种Markdown渲染引擎之后，发现redcarpet的语法比较简洁，据说速度也很快。
目前的缺点是最终表格的效果不是很漂亮，还不知道怎么调整T_T</p>
<div class="highlight"><pre><code class="text">table list below:

First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell

| Item      | Value |
| --------- | -----:|
| Computer  | $1600 |
| Phone     |   $12 |
| Pipe      |    $1 |

| Function name | Description                    |
| ------------- | ------------------------------ |
| `help()`      | Display the help window.       |
| `destroy()`   | **Destroy your computer!**     |
</code></pre></div>
<h2 id="octopress">Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a>是一个基于Jekyll的博客框架，集成了很多Jekyll的插件来提供增强的显示效果。</p>

<h3 id="code-blocks">Code Blocks</h3>
<div class="highlight"><pre><code class="text">``` [language] [title] [url] [link text] [linenos:false] [start:#] [mark:#,#-#]
code snippet
```
{% codeblock [lang:language] [title] [url] [link text] [start:#] [mark:#,#-#] [linenos:false] %}
code snippet
{% endcodeblock %}
</code></pre></div>
<p><code>[language]</code><a href="http://pygments.org/docs/lexers/">支持的语言</a>，&quot;plain&quot;表示纯文本</p>

<p><code>[linenos:false]</code><code>[start:#]</code><code>[mark:#,#-#]</code>目前Octopress 2.0版本（master分支）还不支持，从2.1开始支持。2.1分支目前变为2.5分支，不过Octopress好像主要正在开发3.0版本，希望3.0版本会带上这个功能。当然，也可以自己Hack一下，已经有人这么做了，参考<a href="https://github.com/imathis/octopress/pull/1485">这里</a>，可以尝试这个<a href="https://github.com/benedict-chan/octopress/commit/c6b84659a9c3ed3f4dfc9653931ba797dad434db">patch</a></p>

<h3 id="gist-tag">Gist Tag</h3>
<div class="highlight"><pre><code class="text">{% gist gist_id [filename] %}
</code></pre></div>
<h3 id="code-in-file">Code in file</h3>
<div class="highlight"><pre><code class="text">{% include_code [title] [lang:language] path/to/file [start:#] [end:#] [range:#-#] [mark:#,#-#] [linenos:false] %}
</code></pre></div>
<h3 id="image-tag">Image Tag</h3>
<div class="highlight"><pre><code class="text">{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}
{% img right http://image_url 150 250 &#39;title #1&#39; &#39;An image to shown&#39; %}
</code></pre></div>
<h3 id="excerpts">Excerpts</h3>

<p>用于控制摘要的终止位置。</p>
<div class="highlight"><pre><code class="text">&lt;!--more--&gt;
</code></pre></div>
<h3 id="video-tag">Video Tag</h3>
<div class="highlight"><pre><code class="text">{% video url/to/video [width height] [url/to/poster] %}
</code></pre></div>
<h3 id="import-file">Import file</h3>
<div class="highlight"><pre><code class="text">{% render_partial path/to/file %}
</code></pre></div>
<p>适用于多篇文章引用同一内容，减少重复。相对路径是相对于<code>source</code>目录。</p>

<h3 id="blockquote">Blockquote</h3>
<div class="highlight"><pre><code class="text">{% blockquote [author[, source]] [link] [source_link_title] %}
Quote string
{% endblockquote %}
</code></pre></div>
<h3 id="pullquote">Pullquote</h3>

<p>Pullquote用于强化或突出显示段落中的关键字句，而且不打断原段落的阅读。</p>
<div class="highlight"><pre><code class="text">{% pullquote [left]%}
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, {&quot; surround it like this &quot;} and that&#39;s all there is to it.
{% endpullquote %}
</code></pre></div>
<h3 id="puts">Puts</h3>

<p>Log From Liquid to the Terminal，一个debug Liquid的方法。</p>
<div class="highlight"><pre><code class="text">{% puts %}Optional Text: {{ some_liquid_variable }}{% endputs %}
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始iOS开发]]></title>
    <link href="http://erikge.com/articles/SetupEnvironment"/>
    <updated>2014-03-12T16:04:53+08:00</updated>
    <id>http://erikge.com/articles/SetupEnvironment</id>
    <content type="html"><![CDATA[<p>简要列出快速上手开发iOS程序需要做得事项，以便于在心中有一个整体估计。本文尽量作为一个避免细节的梗概。</p>

<!--more-->

<h2 id="开发环境">开发环境</h2>

<p>搭建开发环境，基本上就是安装各种工具软件。</p>

<ol>
<li>xcode安装

<ul>
<li>AppStore中下载安装xcode程序</li>
<li>安装command line tools。xcode5中不再提供下载，需要从<a href="https://developer.apple.com/downloads/index.action">Apple Developer Tools site</a>下载，或者通过命令行运行<code>xcode-select --install</code>下载安装</li>
<li>第一次在xcode运行程序时，enable developer mode，输入本机密码</li>
<li>在xcode中下载开发文档</li>
</ul></li>
<li>真机调试（如果加入苹果开发者计划，并且是Agent、Admin，如下自动化操作最省事）

<ul>
<li><code>Xcode-&gt;Preferences-&gt;Account</code>添加自己的账号，<code>View Details</code>刷新Provisioning Profiles</li>
<li>插入iphone设备，选择信任</li>
<li>运行程序，出现签名错误，选择自动Fix Issue；出现证书问题，选择自动Fix Issue</li>
<li>（可选）可以导出account备份，下次换机器就不用再重复上述第1、3步</li>
</ul></li>
<li>JDK安装</li>
<li>source tree安装，便于git做代码管理</li>
<li>Homebrew安装，便于安装各种命令行工具

<ul>
<li><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”</code></li>
<li>You should run <code>brew doctor</code> <em>before</em> you install anything.</li>
</ul></li>
<li>SlickEdit安装，非常好用的IDE，需要写c、cpp代码必备</li>
</ol>

<h2 id="处理器架构">处理器架构</h2>

<p>到目前为止，iOS设备采用的都是arm架构的处理器，使用arm指令集；模拟器运行在intel芯片的mac机上，采用的是x86架构，使用x86指令集，对应的编译选项是i386。armv6, armv7等实质上是arm指令集的不同版本，原则上是向下兼容的，例如支持armv7的cpu可以运行armv7选项编译出的程序，也可以运行armv6选项编译出的程序。</p>

<p>已有的iOS设备和arm指令集版本对应关系如下：</p>

<table><thead>
<tr>
<th>指令集版本</th>
<th>iOS设备</th>
</tr>
</thead><tbody>
<tr>
<td>armv6</td>
<td>iPhone，iPhone2，iPhone 3G，第一代、第二代iPod Touch</td>
</tr>
<tr>
<td>armv7</td>
<td>iPhone 3GS,iPhone 4,iPhone 4S，iPad，iPad 2，the new iPad，iPod Touch 3G，iPod Touch 4</td>
</tr>
<tr>
<td>armv7s</td>
<td>iPhone 5</td>
</tr>
<tr>
<td>arm64</td>
<td>iphone 5s，iPad mini 2，iPad Air</td>
</tr>
</tbody></table>

<p>xcode可以把不同指令集编译的版本都打包到同一程序中，这样在不同的设备上就可以自动选择最佳的指令集编译版本，缺点就是体积大点儿。可以根据想支持的iOS设备的多少设置工程Build Setting的Architectures中的<code>Build Active Architecture Only</code>和<code>Architectures</code>，<code>Valid Architectures</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何打开Disqus Discovery功能]]></title>
    <link href="http://erikge.com/articles/DisqusDiscovery"/>
    <updated>2014-02-18T22:16:18+08:00</updated>
    <id>http://erikge.com/articles/DisqusDiscovery</id>
    <content type="html"><![CDATA[<p>自己搭建博客用到Disqus，但是经常看到别人的Disqus和自己的不一样。别人的评论下面有一些类似推广的文章和广告的东西，直觉告诉我这个估计有收入。</p>

<!--more-->

<p>果然，通过<a href="http://help.disqus.com/customer/portal/articles/666278-promoted-discovery-f-a-q-#earn-money">官方介绍</a>发现果然可以。</p>

<h2 id="赚钱方式">赚钱方式</h2>

<ul>
<li>CPC(cost-per-click)，按点击付费，详情参考<a href="http://help.disqus.com/customer/portal/articles/1388608-advertiser-faq">官方说明</a>.</li>
<li>达到100美金以上付款，详情参考<a href="http://help.disqus.com/customer/portal/articles/1208081-receiving-payments-from-disqus">官方说明</a></li>
</ul>

<h2 id="如何开启">如何开启</h2>

<p>如何打开这么好的功能呢？搜索了半天，很沮丧的没有找到，<a href="http://help.disqus.com/customer/portal/articles/666278-promoted-discovery-f-a-q-#discovery-settings">官方</a>也只是简单的说要通过邀请激活，可是没说清楚谁邀请谁啊。后来在<a href="http://blog.acgtyrant.com/how-to-use-disqus-masterly.html">这篇文章</a>中得到启发。原来这个功能的开启不是个人来设置的，而是官方根据你账号的情况决定是否开启这个功能的。。。。。。也就是说，由disqus来决定你的网站上是否有Promoted Discovery。</p>

<p>我简单的把博客上自己的disqus shortname改为别人的（如jekyllbootstrap），就出现了Promoted Discovery内容。瀑布汗啊～～～＃@＃¥&amp;＊&amp;……！@&amp;……＊不过说实在的，老外这样的规则确实有利于维护良好的生态系统，膜拜下吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Jekyll-Bootstrap 比较]]></title>
    <link href="http://erikge.com/articles/OctopressVsJekyllBootstrap"/>
    <updated>2014-02-17T21:17:33+08:00</updated>
    <id>http://erikge.com/articles/OctopressVsJekyllBootstrap</id>
    <content type="html"><![CDATA[<p>想为项目建一个项目网站，希望简单快速搭建，又省事好维护，jekyll成为了一个好选择，可惜没主题的网页不好看，好看的主题还要改半天，不符合“简单快速搭建”的原则了。</p>

<!-- more -->

<p>找到了octopress和jekyll-bootstrap两个工具，拿来试用了下，顺手写个对比。</p>

<h2 id="jekyll-bootstrap">jekyll-bootstrap</h2>

<h3 id="快速开始">快速开始</h3>

<p>通过以下命令就可以开始使用了，用法和jekyll一样</p>
<div class="highlight"><pre><code class="text">git clone https://github.com/plusjade/jekyll-bootstrap.git
$ cd jekyll-bootstrap
$ jekyll serve
</code></pre></div>
<p><a href="http://jekyllbootstrap.com/usage/jekyll-quick-start.html">详细文档</a></p>

<h3 id="优缺点">优缺点</h3>

<p>优点：</p>

<ol>
<li>文档详尽（都不需要我再整理什么了）</li>
<li>用法、语法等和jekyll一致，没有自建一套系统</li>
</ol>

<p>缺点：</p>

<ol>
<li>主题比较少，只有官方的几款主题用起来最省事</li>
</ol>

<h2 id="octopress">octopress</h2>

<h3 id="快速开始">快速开始</h3>
<div class="highlight"><pre><code class="text">// 安装
git clone git://github.com/imathis/octopress.git octopress
cd octopress
gem install bundler
rbenv rehash    # Mac上用不到。If you use rbenv, rehash to be able to run the bundle command
bundle install
rake install    # Install the default Octopress theme
// 创建文章
rake new_post[&#39;Post title&#39;]
// 生成文章
rake generate
// 发布到github的USERNAME.github.com
rake setup_github_pages
rake deploy
// 安装第三方主题方法
cd octopress
git clone GIT_URL .themes/THEME_NAME
rake install[&#39;THEME_NAME&#39;]
rake generate
// 本地运行
rake watch // 实时监视本地修改并regenerate
rake preview // 实时监视，并且启动本地webserver，通过http://localhost:4000访问
</code></pre></div>
<h3 id="主题选择">主题选择</h3>

<ul>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd-Party-Octopress-Themes</a></li>
<li><a href="http://opthemes.com/">opthemes</a></li>
</ul>

<h3 id="优缺点">优缺点</h3>

<p>优点：</p>

<ol>
<li>主题丰富</li>
</ol>

<p>缺点：</p>

<ol>
<li>安装麻烦，安装了一些不想加入到系统中的依赖</li>
<li>自建了一套语法系统，需要再学</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[尝试了下RAID]]></title>
    <link href="http://erikge.com/articles/TryRaidOnMac"/>
    <updated>2014-02-11T19:00:53+08:00</updated>
    <id>http://erikge.com/articles/TryRaidOnMac</id>
    <content type="html"><![CDATA[<p>随着各种电子产品的使用，要存储的东西越来越多。开始就是存在电脑里，后来电脑旧了坏了，换电脑，也不止一台电脑了，数据就存移动硬盘里。再后来，电脑似乎也不那么常用了，就换成各种跨平台的app，自动在各种终端上同步数据。</p>
<p><!--more--></p>
<p>体积比较大的文件也可以存到各种网盘、云盘里了。但是，最珍贵、最想保存下来的，就是这么多年来的照片了，满满的都似乎回忆。而这些照片往往不太愿意放到网上去，毕竟是自己的私人数据，还是不太相信没有底线的互联网，即便是有各种加密，自己设置的密码也不一定靠的住。所以，我一直还是存在两块移动硬盘里，还是身边的柜子她是些。唯一的问题是，两块硬盘上的数据我是没仔细同步的，自己也搞不清楚那个是数据最完整的了。</p>
<p>还好，最近听说了RAID可以在电脑上通过软件实现，所以再次开启折腾之路。</p>
<h2><span class="caps">RAID</span></h2>
<p>RAID，Redundant Array of Inexpensive Disks，廉价磁盘冗余阵列。通过多个磁盘的组合提高数据可靠性、访问速度等。</p>
<ul>
	<li><span class="caps">RAID</span> 0: 磁盘串联，无冗余，磁盘利用率高，读写速度快，最少两块硬盘</li>
	<li><span class="caps">RAID</span> 1: 镜像，磁盘利用率低，读速度快，写速度稍慢，最少两块硬盘</li>
	<li><span class="caps">RAID</span> 2: 汉明码校验，冗余多，读写速度慢，最少三块硬盘</li>
	<li><span class="caps">RAID</span> 3:</li>
	<li><span class="caps">RAID</span> 4:</li>
	<li><span class="caps">RAID</span> 5: 最有用的方案（对企业来说），RAID 0 和 <span class="caps">RAID</span> 1 的折中，最少三块硬盘</li>
	<li><span class="caps">RAID</span> 6:</li>
	<li><span class="caps">RAID</span> 7:</li>
	<li><span class="caps">RAID</span> 10: 先组成RAID 1，再在RAID1的基础上组成RAID 0，常用。</li>
	<li><span class="caps">RAID</span> 01: 顺序和RAID 10相反，不常用。</li>
</ul>
<h2><span class="caps">MAC</span> OS 上的软件实现</h2>
<p>据说有RAID卡的硬件实现，不过偶银子紧张，只好寻找软件实现。目前找到的比较好的软件有两个，系统自带的Disk Utility和SoftRAID。</p>
<h3>Disk Utility</h3>
<p>打开“实用工具”中的“磁盘工具”，通过“RAID”的标签创建即可。软件有说明，创建成功并不复杂。<br />
如果不是用整块磁盘创建RAID，而是用分区创建RAID，创建过程中可能会遇到如下错误：</p>
<blockquote>
<p>无法将磁盘“XXX”添加到RAID磁盘阵列，因为此宗卷所在的磁盘以“主引导记录”为分区图方案。此分区图方案不被支持。</p>
</blockquote>
<p>这是因为磁盘是MBR分区方式，需要改成GPT分区方式。可以在磁盘工具的“分区”重新为磁盘分区，分区时选择“选项”，分区方案选择“GUID分区表”。</p>
<h3>Disk Utility 缺点</h3>
<p>论坛里有人说，DU是系统自带的，稳定省事，而且个人用也足够了。还是不能盲目相信啊，稳定确实是稳定，但是不一定够用。<br />
我有两块移动硬盘，保存照片时作为RAID使用，但是希望也可以单独使用，后续有机会再组合为RAID同步数据。移动硬盘上还有不组合为RAID的分区，大多时候移动硬盘还是需要单独使用。所以，简单说，我要求RAID可以随意拆分和组合。<br />
DU的缺点：</p>
<ul>
	<li>DU创建的RAID不能分开用</li>
	<li>重建时间太漫长</li>
	<li>据说出现磁盘错误，DU不会报警。这个可以通过&quot;RaidEye&quot;:http://www.hanynet.com/raideye/ 解决</li>
</ul>
<p>创建好RAID之后，我单独使用一块移动硬盘，然后拔下来换另一个，反复几次之后，DU里RAID的状态从丢失，变成故障，然后就再也回不去了。还有一个不能忍受的是，我几乎没有修改任何内容，重建（rebuild）也需要一天之久，最短的时间也在三小时以上，这。。。无法接受。。。</p>
<h3>SoftRAID</h3>
<p>于是，只能尝试SoftRAID。<br />
SoftRAID也并不难使用，要注意的是SoftRAID需要装自己的磁盘驱动，然后需要创建自己的分区才能实现各种功能。自己摸索一阵子，掌握各种功能应该不难。<br />
SoftRAID最可爱的地方：</p>
<ul>
	<li>重建真快，文件变化不大时20s内搞定，增量重建</li>
	<li>可以分开使用，将Secondary的分区转换为Read-only Secondary</li>
</ul>
<p>开始以为不能分开用，因为我把作为Secondary的磁盘单独插上后，再两个磁盘都插进去就无法组建RAID了，一直是两个同名的分区。后来研究文档发现，SoftRAID的RAID工作时必须要有一个作为Primary的磁盘的，如果没有的话，就会将Secondary转换为Primary。一个work around的方法是将Secondary的分区转换为Read-only Secondary，需要同步时再转换回来。</p>
<h3>SoftRAID 缺点</h3>
<p>正当我满心欢喜，就准备这么干时，SoftRAID卡死了。在我做一个删除分区的操作时，SoftRAID没有反应了。而且dmg格式的文件也大不开了。我意识到SoftRAID把磁盘操作程序弄坏了。我准备重启，悲剧的是，电脑竟然关不了机了，我只好把Mac像该死的windows一样断电了。<br />
后来这种情况又在别的操作的时候出现了几次，我开始不信任SoftRAID了，不敢将珍贵的照片交给SoftRAID。</p>
<p>$129可以省了。</p>
<h2>美好的RAID</h2>
<p>如此折腾了两天，RAID还只是想象中那么美好啊。别人盲目推崇的东西不一定能妥善的解决自己的问题，还是要多测试。<br />
试验RAID的过程中知道了CCC，还是这货好用，先用着这个解决问题，暂时不碰RAID了。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript初始化]]></title>
    <link href="http://erikge.com/articles/JavaScript-GetStarted"/>
    <updated>2014-02-08T15:01:53+08:00</updated>
    <id>http://erikge.com/articles/JavaScript-GetStarted</id>
    <content type="html"><![CDATA[<h2>背景</h2>
<p>JavaScript是Web上应用最广泛的脚本语音，几乎可以在所有的浏览器中工作。<br />
解释型语言，动态语言，脚本语言。</p>
<p><!--more--></p>
<p>JavaScript真正的官方名称是ECMAScript，它是由 <a href="http://www.ecma-international.org">ECMA组织</a> 开发和维护的。</p>
<h2>如何使用</h2>
<h3>直接嵌入在HTML中</h3>
<p>通过标记符 &lt; script /&gt; 在HTML页面中插入JS(JavaScript)脚本.</p>
<div>
<pre><code class='html'>&amp;lt;html&amp;gt;
<p>&lt;body&gt;<br />
&lt;script type=&quot;text/javascript&quot;&gt;<br />
document.write(&quot;Hello World&quot;)<br />
&lt;/script&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;</code></pre></p>
</div>
<p>以上例子脚步是放在body标签中，放在body标签中的脚本会在页面加载时执行，放在head标签中的脚本会在被调用时执行</p>
<h3>单独的js文件</h3>
<p>为避免重复代码，脚本可以保存在单独的.js文件中，文件中不要再包含 &lt; script &gt; 标签。<br />
<div><br />
  <pre><code class='html'>&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=”xxx.js”&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;</code></pre></p>
</div>
<h2>基本语法</h2>
<ul>
	<li>语句结束不必需以分号结束，但多条语句写在同一行里需要以分号分隔。</li>
	<li>区分大小写</li>
	<li>忽略多余的空格</li>
	<li>使用 // 或者 /* */ 来注释</li>
</ul>
<h3>变量</h3>
<ul>
	<li>变量是一个容器，值和类型都可以动态的改变。</li>
	<li>变量名区分大小写，必须以字母或下划线开头。</li>
	<li>通过关键字var声明，也可以不声名直接使用（这样的缺点是会被自动声明定义为全局变量，在需要定义局部变量时将不是我们需要的）。</li>
</ul>
<div>
<pre><code class='javascript'>var myUrl = “http://www.erikge.com”
<p>myUrl = “http://www.erikge.com”</code></pre></p>
</div>
<ul>
	<li>变量可被重复声明，而且不会丢失原来的值。</li>
	<li>函数中定义的变量只在函数中可见，函数外定义的变量在整个页面可见。</li>
</ul>
<h3>操作符</h3>
<p><b>算数操作符：</b> +, -, *, /, %, ++, &#8211;,<br />
<b>赋值操作符：</b> =, +=, -=, *=, /=, %=,<br />
<b>比较操作符：</b> ==, ===（值和类型都比较）, !=, >, <, >=, <=,<br />
<b>逻辑运算符：</b> &&, ||, !<br />
<b>字符串连接符：</b> +<br />
<b>条件操作符：</b> variablename=(condition)?value1:value2</p>
<h3>条件语句</h3>
<div>
<pre><code class='html'>&amp;lt;script type=”text/javascript”&amp;gt;
<p>if (x&lt;10) {<br />
} else if (x == 10 &amp;&amp; y &gt; 10) {<br />
}else{<br />
}<br />
&lt;/script&gt;</code></pre></p>
</div>
<div>
<pre><code class='html'>&amp;lt;script type=”text/javascript”&amp;gt;
<p>switch(n) {<br />
case 1:<br />
break<br />
case 2:<br />
break<br />
default:<br />
}<br />
&lt;/script&gt;</code></pre></p>
</div>
<h3>函数</h3>
<p>函数是可以重复执行的代码块。函数一般定义在head部分或者单独.js文件中。<br />
定义方法：</p>
<div>
<pre><code class='html'>&amp;lt;script type=”text/javascript”&amp;gt;
<p>function functionname(var1,var2,…,varX) {<br />
some code<br />
return value<br />
}&lt;/script&gt;</code></pre></p>
</div>
<h3>循环</h3>
<div>
<pre><code class='html'>for (var=初始值;var&amp;lt;=结束值;var=var+增量) {
<p>要执行的代码<br />
}</code></pre></p>
</div>
<div>
<pre><code class='html'>while (var&amp;lt;=endvalue) {
<p>code to be executed<br />
}</code></pre></p>
</div>
<div>
<pre><code class='html'>do {
<p>code to be executed<br />
} while (var&lt;=endvalue)</code></pre></p>
</div>
<div>
<pre><code class='html'>for (variable in object) {
<p>要执行的代码<br />
}</code></pre></p>
</div>
<p>JavaScript也有和Cpp/Java类似功能的 break 和 continue。</p>
<h3>事件</h3>
<p>事件在HTML的tag中定义。JavaScript的事件列表如下：</p>
<table>
	<tr>
		<th>事件属性 </th>
		<th>发生条件 </th>
	</tr>
	<tr>
		<td>onabort</td>
		<td>一个图片的加载被终止 (只用于&lt; img&gt;)</td>
	</tr>
	<tr>
		<td>onblur</td>
		<td>当一个元素失去焦点（光标移开）</td>
	</tr>
	<tr>
		<td>onchange</td>
		<td>用户改变了一个域的值（用于 &lt; input type=”text”&gt;, &lt; select&gt;, &lt; textarea&gt;）</td>
	</tr>
	<tr>
		<td>onclick</td>
		<td>鼠标点击对象</td>
	</tr>
	<tr>
		<td>ondblclick</td>
		<td>鼠标双击对象</td>
	</tr>
	<tr>
		<td>onerror</td>
		<td>文件或图片加载出错（ &lt; img&gt;, &lt; object&gt;, &lt; style&gt;）</td>
	</tr>
	<tr>
		<td>onfocus</td>
		<td>一个元素得到焦点</td>
	</tr>
	<tr>
		<td>onkeydown</td>
		<td>键盘上任一键被按下</td>
	</tr>
	<tr>
		<td>onkeypress</td>
		<td>键盘上任一键被按下或保持按下</td>
	</tr>
	<tr>
		<td>onkeyup</td>
		<td>当被按下的键被释放时</td>
	</tr>
	<tr>
		<td>onload</td>
		<td>当页面或图片完成加载</td>
	</tr>
	<tr>
		<td>onmousedown</td>
		<td>当一个鼠标键被按下</td>
	</tr>
	<tr>
		<td>onmousemove</td>
		<td>鼠标移动</td>
	</tr>
	<tr>
		<td>onmouseout</td>
		<td>鼠标被从一个元素上移开</td>
	</tr>
	<tr>
		<td>onmouseover</td>
		<td>鼠标移至某元素上</td>
	</tr>
	<tr>
		<td>onmouseup</td>
		<td>鼠标键被释放</td>
	</tr>
	<tr>
		<td>onreset</td>
		<td>重置按钮被点击</td>
	</tr>
	<tr>
		<td>onresize</td>
		<td>窗口或框架大小被改变</td>
	</tr>
	<tr>
		<td>onselect</td>
		<td>文本被选择</td>
	</tr>
	<tr>
		<td>onsubmit</td>
		<td>提交按钮被点击</td>
	</tr>
	<tr>
		<td>onunload</td>
		<td>用户关闭页面</td>
	</tr>
</table>
<p>用法举例：</p>
<div>
<pre><code class='html'>&amp;lt;input type=”text” size=”30″ id=”email” onchange=”checkEmail()”&amp;gt;;
<p>&lt;form method=”post” action=”xxx.htm” onsubmit=”return checkForm()”&gt;<br />
&lt;a href=”http://erikge.com”<br />
onmouseover=”alert(‘An onMouseOver event’);”&gt; erikge &lt;/a&gt;</code></pre></p>
</div>
<h3>异常处理</h3>
<p>如果不处理异常，当网页出错时，会弹出一个JavaScript的警告窗口，告诉我们发生运行出错， 并询问是否要“debug?”。这种出错信息也许对开发者有用，但是对用户没有用处。<br />
有两种异常处理的方式：</p>
<ul>
	<li>使用 try…catch 语句 (适用于IE5以上, Mozilla 1.0, 和 Netscape 6)</li>
	<li>使用onerror 事件。 这是捕捉错误的旧的传统做法(自从Netscape 3以后就开始使用)</li>
</ul>
<div>
<pre><code class='js'>try
<p>{<br />
//Run some code here<br />
}<br />
catch(err)<br />
{<br />
//Handle errors here<br />
}</code></pre></p>
</div>
<p>例如：</p>
<div>
<pre><code class='js'>function message()
<p>{<br />
try<br />
{<br />
adddlert(“Welcome guest!”)<br />
}<br />
catch(err)<br />
{<br />
txt=”本页面出错.\n”<br />
txt+=”Error description: ” + err.description + “\n\n”<br />
txt+=”点击OK继续浏览本页,\n”<br />
txt+=”或点击 Cancel 返回主页\n\n”<br />
if(!confirm(txt))<br />
{<br />
document.location.href=”http://www.shorelinesolution.com/”<br />
}<br />
}<br />
}</code></pre></p>
</div>
<p>throw语句可以生成一个例外(exception)。try…catch和throw语句可以结合使用。</p>
<div>
<pre><code class='js'>try
<p>{<br />
if(x&gt;10)<br />
throw “Err1″<br />
else if(x&lt;0)<br />
throw “Err2″<br />
}<br />
catch(er)<br />
{<br />
if(er==”Err1″)<br />
alert(“错误! 值太大了”)<br />
if(er == “Err2″)<br />
alert(“错误! 值太小了”)<br />
}</code></pre></p>
</div>
<h3>特殊字符</h3>
<p>反斜杠 backslash (\) 用来表示特殊字符。</p>
<blockquote>
<p>\’ 单引号(single quote)<br />
\” 双引号(double quote)<br />
\&amp; 与符号(ampersand)<br />
&#92; 反斜杠(backslash)<br />
\n 换行(new line)<br />
\r 回车键(carriage return)<br />
\t 制表符(tab)<br />
\b 退格符(backspace)<br />
\f 换页(form feed)</p>
</blockquote>
<h2>常用API</h2>
<h3>弹出窗口</h3>
<div>
<pre><code class='html'>&amp;lt;html&amp;gt;
<p>&lt;head&gt;<br />
&lt;script type=”text/javascript”&gt;<br />
function disp_alert()<br />
{<br />
alert(“警示窗口 （Alert Box）: 你好! ” + ‘\n’ + “第二行内容.”)<br />
}<br />
&lt;/script&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;&lt;input type=”button” onclick=”disp_alert()” value=”显示提示窗口” /&gt;&lt;/body&gt;<br />
&lt;/html&gt;</code></pre></p>
</div>
<div>
<pre><code class='html'>&amp;lt;html&amp;gt;
<p>&lt;head&gt;<br />
&lt;script type=”text/javascript”&gt;<br />
function disp_confirm()<br />
{<br />
var r=confirm(“确认窗口（Confirm Box）: Press a button”)<br />
if (r==true)<br />
{<br />
document.write(“You pressed OK!”)<br />
}<br />
else<br />
{<br />
document.write(“You pressed Cancel!”)<br />
}<br />
}<br />
&lt;/script&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;&lt;input type=”button” onclick=”disp_confirm()” value=”显示确认窗口” /&gt;&lt;/body&gt;<br />
&lt;/html&gt;</code></pre></p>
</div>
<div>
<pre><code class='html'>&amp;lt;html&amp;gt;
<p>&lt;head&gt;<br />
&lt;script type=”text/javascript”&gt;<br />
function disp_prompt()<br />
{<br />
var name=prompt(“提问窗口（Prompt Box）: Please enter your name”,”Aqua”)<br />
if (name!=null &amp;&amp; name!=”&quot;)<br />
{<br />
document.write(“Hello ” + name + “! How are you today?”)<br />
}<br />
}<br />
&lt;/script&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;&lt;input type=”button” onclick=”disp_prompt()” value=”显示提问窗口” /&gt;&lt;/body&gt;<br />
&lt;/html&gt;</code></pre></p>
</div>
<h2>to be continued</h2>
<p>需要继续阅读的链接</p>
<p><a href="http://www.prglab.com/blog/js-tutorial">JavaScript对象</a><br />
<a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html">$</a><br />
<a href="http://jsperf.com/">$</a></p>]]></content>
  </entry>
  
</feed>
